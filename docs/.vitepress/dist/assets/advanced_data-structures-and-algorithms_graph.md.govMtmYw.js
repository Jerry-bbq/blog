import{_ as s,c as i,o as a,V as t}from"./chunks/framework.e0zpvRJ8.js";const n="/assets/graph.UiNgJCHh.png",y=JSON.parse('{"title":"图","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/data-structures-and-algorithms/graph.md","filePath":"advanced/data-structures-and-algorithms/graph.md","lastUpdated":1657172225000}'),h={name:"advanced/data-structures-and-algorithms/graph.md"},p=t('<h1 id="图" tabindex="-1">图 <a class="header-anchor" href="#图" aria-label="Permalink to &quot;图&quot;">​</a></h1><p>图是一种非线性数据结构。图是一组由边连接的节点（或顶点）。学习图是重要的，因为任何二元关系都可以用图来表示。</p><p>一个图 G = (V, E)由以下元素组成。</p><ul><li>V：一组顶点</li><li>E：一组边，连接 V 中的顶点</li></ul><p>下图表示一个图。</p><p><img src="'+n+`" alt="graph"></p><p>由一条边连接在一起的顶点称为<strong>相邻顶点</strong>。比如， A 和 B 是相邻的， A 和 D 是相邻的， A 和C 是相邻的， A 和 E 不是相邻的。</p><p>一个顶点的度是其相邻顶点的数量。比如， A 和其他三个顶点相连接，因此 A 的度为 3； E和其他两个顶点相连，因此 E 的度为 2。</p><p>路径是顶点 v1, v2, …, vk的一个连续序列，其中 vi和 vi+1是相邻的。以上一示意图中的图为例，其中包含路径 A B E I 和 A C D G</p><h2 id="创建图类" tabindex="-1">创建图类 <a class="header-anchor" href="#创建图类" aria-label="Permalink to &quot;创建图类&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">isDirected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isDirected </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isDirected </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否有向</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.vertices </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存储图中所有顶点的名字</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.adjList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存储邻接表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,11),e=[p];function l(k,r,d,c,E,g){return a(),i("div",null,e)}const _=s(h,[["render",l]]);export{y as __pageData,_ as default};
