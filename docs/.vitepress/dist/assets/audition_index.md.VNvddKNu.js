import{_ as i,c as s,o as l,V as a}from"./chunks/framework.e0zpvRJ8.js";const c=JSON.parse('{"title":"面经","description":"","frontmatter":{},"headers":[],"relativePath":"audition/index.md","filePath":"audition/index.md","lastUpdated":null}'),n={name:"audition/index.md"},e=a(`<ul><li><a href="./summary.html">总结</a></li></ul><p>杭州目前招聘情况要求：</p><ul><li>技术栈： ts、vue、react、跨平台（react-native、nuiapp）、小程序开发（uniapp，taro）、打包工具（webpack、vite）</li><li>端：2B，2C</li><li>业务： <ul><li>数据可视化：echart、g2、地图、webgl（threejs、cesium，thingjs、mapBox、D3.js）</li><li>低代码平台</li></ul></li><li>大厂都要求算法题（阿里，网易...），微前端</li></ul><h1 id="面经" tabindex="-1">面经 <a class="header-anchor" href="#面经" aria-label="Permalink to &quot;面经&quot;">​</a></h1><h2 id="吉利科技" tabindex="-1">吉利科技 <a class="header-anchor" href="#吉利科技" aria-label="Permalink to &quot;吉利科技&quot;">​</a></h2><h3 id="一面" tabindex="-1">一面 <a class="header-anchor" href="#一面" aria-label="Permalink to &quot;一面&quot;">​</a></h3><ul><li>2022-07-12 15:00</li><li>腾讯会议 <a href="https://meeting.tencent.com/dm/ZAPKLBybODzL" target="_blank" rel="noreferrer">https://meeting.tencent.com/dm/ZAPKLBybODzL</a> #腾讯会议：141-610-563</li><li>vue的双向式数据绑定的原理</li><li>vue2与vue3的区别</li><li>history模式需要配置什么</li><li>父子组件的生命周期</li><li>call、apply、bind的区别</li><li>防抖节流的原理</li><li>如何判断是否是一个数组</li><li>箭头函数与普通函数的区别</li><li>前端刷新token的方式</li><li>uniapp的渲染方式</li><li>微前端的了解</li><li>graphQL的使用</li></ul><h3 id="二面" tabindex="-1">二面 <a class="header-anchor" href="#二面" aria-label="Permalink to &quot;二面&quot;">​</a></h3><ul><li>2022-07-15 11:30</li></ul><h2 id="苏泊尔-lot业务智能炒菜锅" tabindex="-1">苏泊尔-LOT业务智能炒菜锅 <a class="header-anchor" href="#苏泊尔-lot业务智能炒菜锅" aria-label="Permalink to &quot;苏泊尔-LOT业务智能炒菜锅&quot;">​</a></h2><ul><li>2022-07-12 11:00</li><li>vue2与vue3实现响应式的区别</li><li>js的数据类型</li><li>js的数据类型检测</li><li>浏览器的回流与重绘</li><li>讲讲防抖节流</li><li>讲讲闭包的应用场景，和你使用过的闭包</li><li>var、let、const的区别</li><li>用过哪些es6语法</li><li>普通函数与箭头函数的区别</li><li>cookie/localStorage/sessionStorage的区别</li><li>call、apply、bind的区别</li><li>跨域的几种实现方式</li><li>HTTP的状态码</li><li>垃圾回收机制</li><li>讲讲盒模型</li><li>flex的属性</li><li>水平垂直居中</li><li>响应式，屏幕适配的方案</li><li>做过哪些性能优化</li><li>总结：薪资低，不重视前端</li></ul><h2 id="刀豆网络科技有限公司-光子玩具" tabindex="-1">刀豆网络科技有限公司-光子玩具 <a class="header-anchor" href="#刀豆网络科技有限公司-光子玩具" aria-label="Permalink to &quot;刀豆网络科技有限公司-光子玩具&quot;">​</a></h2><ul><li>2022-07-11 14:00</li><li>vue2.0与3.0的区别</li><li>做过哪些vue项目的性能优化</li><li>防抖节流的理解</li><li>v-for为什么加key</li><li>nextTick使用场景</li><li>bfc</li><li>闭包与应用场景</li><li>原型链</li><li>object.defineProperty与proxy的区别</li><li>webpack优化</li><li>用过哪些es6语法</li><li>async/await的理解</li><li>call、apply、bind的区别</li><li>事件循环</li><li>http的请求和相应体</li><li>水平垂直居中的实现</li><li>上家公司为什么离职</li><li>最近了解哪些新技术</li><li>1-3年的职业规划</li><li>vue和react的区别</li><li>写过nodejs嘛，用一句话介绍nodejs</li><li>总结：小公司，能开的薪资有限</li></ul><h2 id="科大讯飞" tabindex="-1">科大讯飞 <a class="header-anchor" href="#科大讯飞" aria-label="Permalink to &quot;科大讯飞&quot;">​</a></h2><ul><li>2022-07-08 16:00</li><li>智慧城市BG</li><li>jquery封装流程</li><li>敏捷开发你觉得好处和缺点是什么</li><li>笔试题，多个请求串行</li><li>你觉得你这六年工作经历里最有成就感的事情是什么，如何体现你你这六年工作经验的技术方面的沉淀</li></ul><h2 id="上海鼎茂信息技术有限公司" tabindex="-1">上海鼎茂信息技术有限公司 <a class="header-anchor" href="#上海鼎茂信息技术有限公司" aria-label="Permalink to &quot;上海鼎茂信息技术有限公司&quot;">​</a></h2><ul><li>2022-07-07 16:30</li><li>面的比较简单</li><li>数据，微前端，echart4.0、vue2.0，b端产品，可尝试新的技术手段</li></ul><h2 id="杭州巨峰科技杭州巨峰科技" tabindex="-1">杭州巨峰科技杭州巨峰科技 <a class="header-anchor" href="#杭州巨峰科技杭州巨峰科技" aria-label="Permalink to &quot;杭州巨峰科技杭州巨峰科技&quot;">​</a></h2><h3 id="一面-1" tabindex="-1">一面 <a class="header-anchor" href="#一面-1" aria-label="Permalink to &quot;一面&quot;">​</a></h3><ul><li>2022-07-07 15:00</li><li>最有成就感的事情是什么</li><li>上一家公司离职的原因</li><li>让你去实现一个vue，你怎么去实现</li><li>你觉得你的优势是什么</li><li>组件传参的方式有些</li><li>vue权限</li><li>vue动态路由</li><li>cookie与localstorage的区别，cookie为什么存用户的信息</li><li>两个页面如何传参传参</li><li>业务方面LOT智能家居项目，uniapp混合开发，后台等</li></ul><h3 id="二面-1" tabindex="-1">二面 <a class="header-anchor" href="#二面-1" aria-label="Permalink to &quot;二面&quot;">​</a></h3><h2 id="网易农业事业部" tabindex="-1">网易农业事业部 <a class="header-anchor" href="#网易农业事业部" aria-label="Permalink to &quot;网易农业事业部&quot;">​</a></h2><ul><li>获取字符串中重复次数最多的字符</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;abcdaabbsssss&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testStrArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testStr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> validWords </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用指针法，获取最大重复次数及最大次数对应的字符数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (startIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testStrArr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // startIndex 和 endIndex 位置的字符不同</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (testStrArr[startIndex] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testStrArr[endIndex]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 计算 startIndex 和 endIndex 之间的字符个数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rangeNum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startIndex;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rangeNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxNum) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            maxNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rangeNum;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 如果出现了新的最大次数，则给存放符合条件字符的数组重新赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            validWords </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [testStrArr[startIndex]];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rangeNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxNum) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 如果新的次数和最大次数相等，则将该字符 push 进字符数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            validWords.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(testStrArr[startIndex]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        startIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endIndex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    endIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(validWords)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> validWords.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> word</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> validWords[index];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`重复次数最多的是：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> word</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }，重复次数为：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxNum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>获取字符串中重复次数最多的字符</li></ul><h2 id="六量科技" tabindex="-1">六量科技 <a class="header-anchor" href="#六量科技" aria-label="Permalink to &quot;六量科技&quot;">​</a></h2><p>任意输入一个数组，比如【5，9，3,6, 8, 10，1, 4】，找到数组中“加和”最大的“逆序对”。数组中任意两个元素，凡是满足左边数字大于右边的，就构—个逆序对，且两个元素可以不相邻，比如：</p><ul><li>举例的数组中【3，8】构成一个正序对，因为 3&lt;8。</li><li>再比如举例的数组中【10,11】构成一个逆序对，因为 10&gt;1，且其加和为 10+1=11。</li><li>再比如，举例的数组中【9，6】也构成一个逆序对，因为 9&gt;6，且其加和为 9+6=15。</li></ul><p>请你用熟悉的语言，写一段标准的函数代码：输入任意一个数组，返回数组中满足“加和”最大的那个“逆序对”(备注：原数组中的元素顺序不可改变）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        maxArr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [arr[i], arr[j]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxArr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="美的" tabindex="-1">美的 <a class="header-anchor" href="#美的" aria-label="Permalink to &quot;美的&quot;">​</a></h2><h3 id="一面-2" tabindex="-1">一面 <a class="header-anchor" href="#一面-2" aria-label="Permalink to &quot;一面&quot;">​</a></h3><ul><li>2022.2.23</li><li>讲讲vue的双向数据绑定原理</li><li>vue的兄弟组件传参</li><li>vue的v-model，改变value的名称</li><li>vue是如何实现公共代码</li><li>vuex的五个属性以及辅助属性</li><li>vue中如何监听vuex的数据</li><li>mixins的缺点，生命周期是否会都执行</li><li>事件循环，宏任务微任务，Vue.$nextTick使用的宏任务还是微任务</li><li>原型链以及如何实现一个继承</li><li>typeof和instanceof的区别</li><li>如何判断一个变量是对象还是数组</li><li>讲讲你用到的es6方法，Set和Map的区别</li><li>flex: auto wrap</li><li>实现垂直居中的方法</li><li>实现一个正方形，并可以适配不同屏幕</li><li>实现一个三角形</li><li>做过哪些性能优化</li><li>跨标签传参</li><li>做过哪些webpack配置</li><li>对两个缓存的认识，命中协商缓存返回的状态码是304</li></ul><h2 id="深大智能" tabindex="-1">深大智能 <a class="header-anchor" href="#深大智能" aria-label="Permalink to &quot;深大智能&quot;">​</a></h2><h3 id="一面-3" tabindex="-1">一面 <a class="header-anchor" href="#一面-3" aria-label="Permalink to &quot;一面&quot;">​</a></h3><ul><li>2021.12.13</li><li>new vue() init初始化了哪些配置</li><li>init中配置的执行顺序</li><li>vue data为什么是函数</li><li>vue在data中定义一个变量，在不同生命周期中给这个变量赋值，哪些生命周期会触发数据的变化</li><li>vue router中路由几种形式，以及区别</li><li>vue router是如何工作的</li><li>js的基础数据类型有哪些，你知道的哪些判断数据类型的方法，toString判断时返回的数据格式是怎么样的</li><li>深浅拷贝原理</li><li>防抖节流，以及应用场景</li><li>做过哪些项目优化</li><li>了解哪些前沿技术</li></ul><h3 id="二面-2" tabindex="-1">二面 <a class="header-anchor" href="#二面-2" aria-label="Permalink to &quot;二面&quot;">​</a></h3><ul><li>2021.12.14</li><li>闭包以及应用，手写一个</li><li>vue的响应式原理，依赖收集在哪个环节</li><li>讲讲vue3，proxy的优点</li><li>讲讲事件循环</li><li>t1,t2执行之后执行t3，你有几种实现方式</li><li>浏览器缓存，两个tab对应同一个缓存资源，其中一个tab页缓存时间超时更新了资源，另一个tab页会怎么样</li><li>做过哪些项目优化</li></ul><h2 id="邦盛科技" tabindex="-1">邦盛科技 <a class="header-anchor" href="#邦盛科技" aria-label="Permalink to &quot;邦盛科技&quot;">​</a></h2><h3 id="一面-4" tabindex="-1">一面 <a class="header-anchor" href="#一面-4" aria-label="Permalink to &quot;一面&quot;">​</a></h3><ul><li>2021.12.01</li><li>自我介绍</li><li>nextTick原理</li><li>vue中数据量比较多大的话，怎么处理(Object.freeze()冻结)</li><li>webpack优化</li><li>用过哪些es6语法，const、let、箭头函数、数组遍历的方法（map,filter,find,every,some,reduce）、对象操作的方法（扩展运算法（浅拷贝），keys,values,assign,freeze,set,map）</li><li>箭头函数与普通函数的区别</li><li>深拷贝实现</li></ul><h3 id="二面-3" tabindex="-1">二面 <a class="header-anchor" href="#二面-3" aria-label="Permalink to &quot;二面&quot;">​</a></h3><ul><li>2021.12.03</li><li>自我介绍</li><li>项目经历</li><li>你在项目中遇到问题会怎么解决</li><li>面试官提了两个当前项目中存在的问题问怎么解决 <ul><li>多个项目打包成一个项目，但是打包比较慢，改动一个需求，整个项目就需要重新打开，比较麻烦，怎么解决</li><li>项目中有一个tab页比价卡，怎么解决</li></ul></li></ul><h3 id="三面" tabindex="-1">三面 <a class="header-anchor" href="#三面" aria-label="Permalink to &quot;三面&quot;">​</a></h3><ul><li>人事面</li></ul><h2 id="每日互动" tabindex="-1">每日互动 <a class="header-anchor" href="#每日互动" aria-label="Permalink to &quot;每日互动&quot;">​</a></h2><h3 id="一面-5" tabindex="-1">一面 <a class="header-anchor" href="#一面-5" aria-label="Permalink to &quot;一面&quot;">​</a></h3><ul><li>2021.11.29</li><li>自我介绍,了解到公司的技术栈是vue，目前是vue2.0版本</li><li>说说之前的项目经历，项目介绍，你在项目中扮演什么角色</li><li>code review你是怎么做的</li><li>代码校验eslint你在什么阶段做，怎么配置</li><li>有没有做过ui组件，你们的elementui是怎么使用</li><li>你在项目中遇到的问题</li><li>webpack优化你是怎么做的</li><li>loader怎么玩，node-sass，scss-loader的作用</li><li>有没有做过技术分享，分享了什么</li><li>nextTick原理和使用场景，vue3中是怎么实现的</li><li>浏览器缓存，强缓存和协商缓存的区别，各自的api有哪些，api之间的作用和区别</li><li>网络安全，XSS和CSRF</li><li>讲讲HTTP1，HTTP2,HTTPS各自的发展史，以及区别</li><li>面试体感很好，有些内容忘接了，面试官也会提醒；重点提示，hr小姐姐效率贼高，面了大概一个小时，半个小时后，就给出了面试结果，准备二面</li></ul><h3 id="二面-4" tabindex="-1">二面 <a class="header-anchor" href="#二面-4" aria-label="Permalink to &quot;二面&quot;">​</a></h3><ul><li>2021.11.30</li><li>自我介绍</li><li>vue3的新特性</li><li>vite了解过嘛，跟webpack的区别</li><li>keep-alive的生命周期，什么时候执行，为什么有了mounted还走activated</li><li>es6的新特性你用过哪些</li><li>箭头函数和普通函数的区别</li><li>promise的三个状态，给了一道题判断状态</li><li>你做过哪些webpack的优化</li><li>code review是怎么做的</li><li>node用过嘛</li><li>commonjs和es module的区别</li></ul><h2 id="奇点云" tabindex="-1">奇点云 <a class="header-anchor" href="#奇点云" aria-label="Permalink to &quot;奇点云&quot;">​</a></h2><ul><li><p>2021.11.23</p></li><li><p>svg和canvas的区别，svg和canvas的性能</p></li><li><p>display:none,visible：区别</p></li><li><p>您做过哪些css优化</p></li><li><p>position:absolute和transform的区别</p></li><li><p>setTimeout(()=&gt;{}, 0)的执行过程</p></li><li><p>axios是基于什么实现的</p></li><li><p>XMLHTTP和fetch的区别</p></li><li><p>http，http2，http3的区别</p></li><li><p>项目中跨域怎么解决的，还有什么跨域的方案，Nginx反相代理</p></li><li><p>浏览器缓存：强缓存和协商缓存</p></li><li><p>vue中watch的deep实现原理</p></li><li><p>webpack你做过哪些配置</p></li><li><p>项目中图片是怎么能压缩的</p></li><li><p>png和jpg的区别</p></li><li><p>箭头函数与普通函数的区别</p></li><li><p>项目中一个页面加载太慢，你怎么排查</p></li><li><p>一个项目打包之后包太大，怎么优化</p></li><li><p>深拷贝你是怎么实现的，JSON.parse(JSON.stringify())的缺点</p></li><li><p>for...in和for...of的区别</p></li></ul><h2 id="来未来笔试题" tabindex="-1">来未来笔试题 <a class="header-anchor" href="#来未来笔试题" aria-label="Permalink to &quot;来未来笔试题&quot;">​</a></h2><ul><li><p>2021.11.20</p></li><li><p>从url中获取参数，getParamsUrl(url, param)</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getParamsUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (url, param) {}</span></span></code></pre></div><ul><li>promise并发请求两次</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span></code></pre></div><ul><li>使用给出的校验规则，校验一个json对象的每个属性是否匹配，不匹配打印出对象的key，输出格式如下：[&#39;name&#39;,&#39;parent.age&#39;, &#39;joms.name&#39;]</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fileds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span></code></pre></div><h2 id="阿里乌鸫科技" tabindex="-1">阿里乌鸫科技 <a class="header-anchor" href="#阿里乌鸫科技" aria-label="Permalink to &quot;阿里乌鸫科技&quot;">​</a></h2><h3 id="一面-6" tabindex="-1">一面 <a class="header-anchor" href="#一面-6" aria-label="Permalink to &quot;一面&quot;">​</a></h3><ul><li>2021.11.19</li><li>自我介绍，项目介绍，你在项目中担任的角色，了解到使用React技术栈</li><li>盒模型，如何获取dom的宽度，两个元素margin重叠如何解决</li><li>讲讲作用域链</li><li>讲讲原型链</li><li>讲讲事件循环</li><li>vue响应式原理</li><li>讲讲vue的生命周期</li><li>讲讲vue的通信方式</li><li>computed watcher和watcher的区别</li><li>项目介绍，讲讲你在项目中遇到的问题</li><li>讲讲你知道的设计模式</li><li>promise的三个状态，它的rejected和catch的区别</li></ul><h3 id="二面-5" tabindex="-1">二面 <a class="header-anchor" href="#二面-5" aria-label="Permalink to &quot;二面&quot;">​</a></h3><ul><li>2021.11.25</li><li>自我介绍</li><li>了解数据结构嘛</li><li>讲讲你的项目经历以及在项目中扮演的角色</li><li>讲讲你在项目中遇到的问题以及解决方案</li><li>vue响应式原理</li><li>promise.all的实现原理</li></ul><h3 id="三面-1" tabindex="-1">三面 <a class="header-anchor" href="#三面-1" aria-label="Permalink to &quot;三面&quot;">​</a></h3><ul><li>2021.11.29</li><li>说说你在项目中的自我沉淀的一些东西</li><li>让你设计一个自动保存表单，你会怎么设计</li><li>说说单点登录，你会怎么做</li><li>卒</li></ul><h2 id="同花顺一面" tabindex="-1">同花顺一面 <a class="header-anchor" href="#同花顺一面" aria-label="Permalink to &quot;同花顺一面&quot;">​</a></h2><ul><li>2021.11.16</li><li>自我介绍</li><li>面试官问一些问题，你在上一家公司有没有做过leader，都做了哪些东西，有没有自己的开源项目，一些组件等等</li><li>笔试题 <ul><li>一个包含四个数字元素的数组，从里面随便取出一个数，其他元素按照顺序成一个数，求最大的数</li><li>concat可以深拷贝</li></ul></li><li>computed和watch的区别，底层实现原理</li><li>父子组件生命周期执行顺序（全部生命周期）</li><li>Vue.set的底层实现</li></ul><h2 id="有赞一面" tabindex="-1">有赞一面 <a class="header-anchor" href="#有赞一面" aria-label="Permalink to &quot;有赞一面&quot;">​</a></h2><ul><li>2021.11.16</li><li>自我介绍</li><li>最近项目中遇到的问题 <ul><li>Vuerouter路由跳转path不能与params同时使用</li><li>Node版本升级太高，老项目跑不起来</li><li>随着项目越来越庞大，热更新变慢</li><li>node-sass下载不下来，改用淘宝镜像下载</li><li>有很多的环境，开发，测试，预发，线上环境项目分环境打包</li></ul></li><li>两道笔试题</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 题目一</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 请将一个key值是驼峰形式的json数据转换为key值为蛇形的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * const obj = { aBc: 1, aBcDe: &#39;aaa&#39; }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * toSnakeCase(obj) ==&gt;  { a_bc: 1, a_bc_de: &#39;aaa&#39; }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 题目二</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 实现一个flattenDeep方法，可以将一个多层嵌套的数组打平成一级。数组可以直接通过&quot;.flattenDeep()&quot;的方式调用它</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * const arr = [[1], [2, 3, [4]], 5, { foo: function() {} }]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * arr.flattenDeep() ==&gt; [1, 2, 3, 4, 5, { foo: function() {} }]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><ul><li>Vue的响应式原理，是如何对数组进行监听的</li><li>Vue组件通信有哪些</li><li>对称加密和非对称加密</li><li>讲讲diff算法，key的作用</li><li>Vue的生命周期，每个生命周期是做什么的</li><li>v-model的原理</li><li>Vue项目的优化有哪些，webpack优化，cdn是什么 <ul><li>路由懒加载</li><li>静态资源放到cdn上面，比如图片，icon图标，ui组件库</li><li>在组件销毁时，addEventListener绑定的事件要remove掉，定时器要清空</li><li>第三方库按需引入，比如lodash</li><li>CommonsChunkPlugin分离第三方库和自定义公共模块，不然每个引入第三方库的模块，都是重复打包这些文件</li></ul></li><li>事件循环，setTimeout是怎么执行的</li><li>讲讲原型链，实现一个最简单继承</li><li>小程序中遇到的兼容性问题</li></ul><h2 id="得物" tabindex="-1">得物 <a class="header-anchor" href="#得物" aria-label="Permalink to &quot;得物&quot;">​</a></h2><h3 id="一面-7" tabindex="-1">一面 <a class="header-anchor" href="#一面-7" aria-label="Permalink to &quot;一面&quot;">​</a></h3><ul><li>2021.11.09</li></ul><p>vue</p><ul><li>响应式原理 <ul><li>采用数据劫持结合发布订阅模式来实现响应式的，使用<code>Object.defineProperty</code>来劫持数据的<code>getter</code>和<code>setter</code>,在数据变动的时候，发布消息给订阅者，触发相应的监听回调</li></ul></li><li>Object.defineProperty的缺点 <ul><li>无法检测到对象属性的新增和删除，解决方案是<code>Vue.set(obj, property, value)</code></li><li>可以检测到数据索引的变化，但是性能影响，因此Vue重写了数组操作的方法，如<code>push，pop，shift，unshift，splice，sort，reverse</code></li></ul></li><li>v-if与v-show区别 <ul><li>v-if是组件真的渲染和销毁，而不是显示和隐藏；v-show通过CSS display来控制显示和隐藏</li></ul></li><li>keep-alive的api以及作用 <ul><li>实现组件的缓存，当切换组件的时候，不会对当前组件进行销毁</li><li>两个常用属性<code>include</code>、<code>exclude</code>，允许组件有条件的进行缓存</li><li>两个生命周期<code>activated</code>、<code>deactivated</code>，用来得知当前组件是否处于活跃状态</li></ul></li><li>computed与watcher的区别 <ul><li>computed本质是一个具备缓存的watcher，依赖的属性发生变化就会更新视图，并且计算属性默认只有getter，计算比较消耗性能的计算场景或者表达式过于复杂</li><li>watch没有缓存性，更多的是观察的作用，可以监听某些数据执行回调</li></ul></li><li>vue3与vue2的区别 <ul><li>vue3性能比vue2强</li><li>vue3使用<code>proxy</code>替换了<code>Object.defineProperty</code></li><li>新增了Composition API（组合API）</li><li>新增了Fragment, Teleport, Suspense</li><li>新增了vite构建工具</li><li>支持ts</li></ul></li><li>子组件向父组件传参的方式有哪些 <ul><li>$emit</li><li>$refs</li><li>vuex</li></ul></li><li>Vue中的data为什么是一个函数不是直接是一个对象 <ul><li>一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数</li></ul></li><li>for循环为什么使用key <ul><li>标识组件的唯一性，虚拟DOM的diff算法在同层级比较的时候效率会提升</li><li>尽量不要使用数组的的索引值index做key值，因为如果数组中的内容增加或者减少的话，会造成不必要的DOM更新</li></ul></li></ul><p>js</p><ul><li>const定义的变量能不能改变 <ul><li>定义的基本类型不能改变</li><li>定义的引用类型可以改变，改变的是引用类型的值，而不是引用类型的指向地址</li></ul></li><li>new操作符的实现原理 <ul><li>创建一个空对象实例</li><li>将实例的__proto__指向构造函数的原型constructor.prototype（继承构造函数的原型对象）</li><li>执行构造函数，绑定this指向实例，实例作为this的上下文）</li><li>如果构造函数的执行结果是一个对象，则返回这个对象，否则，返回实例对象</li></ul></li><li>判断是否是数组的方法有哪些 <ul><li>instanceof，如 arr instanceof Array</li><li>Object.prototype.toString.call(arr) === &#39;[object, Array]&#39;</li><li>Array.isArray(arr)</li></ul></li><li>数组遍历的方法有哪些 <ul><li>for、forEach、map、filter、find、findIndex、every、reduce、some</li></ul></li><li>垃圾回收机制是怎么样的，闭包是怎么清除的 <ul><li>js引擎会对程序不使用的内存或者使用过的内存不会再使用的内存空间进行内存释放，闭包是通过使用完之后将闭包函数赋值为空来清除的</li></ul></li><li>undefined和null的区别 <ul><li>undefined 表示一个变量没有被声明，或者被声明了但没有被赋值（未初始化），一个没有传入实参的形参变量的值为undefined，如果一个函数什么都不返回，则该函数默认返回undefined</li><li>null则表示“什么都没有”，即“空值”</li><li>null和undefined之间的主要区别在于它们被转换为原始类型的方式<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v1)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v2)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN</span></span></code></pre></div></li></ul></li></ul><p>webpack</p><ul><li>热更新原理 <ul><li>webpack --watch启动监听模式之后，webpack第一次编译项目，并将结果存储在内存文件系统，相比较磁盘文件读写方式内存文件管理速度更快，内存webpack服务器通知浏览器加载资源，浏览器获取的静态资源除了JS code内容之外，还有一部分通过webpack-dev-server注入的的 HMR runtime代码，作为浏览器和webpack服务器通信的客户端（webpack-hot-middleware 提供类似的功能）</li><li>文件系统中一个文件（或者模块）发生变化，webpack监听到文件变化对文件重新编译打包，每次编译生成唯一的hash值，根据变化的内容生成两个补丁文件：说明变化内容的manifest（文件格式是hash.hot-update.json，包含了hash和chundId用来说明变化的内容）和chunk js（hash.hot-update.js）模块</li><li>hrm-server通过websocket将manifest推送给浏览器浏览器接受到最新的hotCurrentHash，触发 hotDownloadManifest函数，获取manifest json 文件</li><li>浏览器端hmr runtime根据manifest的hash和chunkId使用ajax拉取最新的更新模块chunk</li></ul></li><li>打包文件使用什么loader <ul><li>file-loader</li></ul></li></ul><h3 id="二面-6" tabindex="-1">二面 <a class="header-anchor" href="#二面-6" aria-label="Permalink to &quot;二面&quot;">​</a></h3><ul><li>2021.11.11</li><li>讲讲你在项目中遇到的问题以及解决方案</li><li>比如开发了一个页面，使用越来越卡顿，你会怎么去排查问题</li><li>讲讲defineReative的流程</li><li>使用const定义一个对象，可以更改嘛，为什么可以</li><li>用flex实现一个九宫格</li><li>讲讲浅拷贝和深拷贝的原理</li><li>对象的引用是存在堆还是栈</li><li>Es6的扩展运算符，操作一个对象是浅拷贝还是深拷贝</li><li>讲讲实现深拷贝的过程</li><li>客户端和服务端使用http交互的过程</li><li>讲讲setTimeout的原理</li></ul><h2 id="盒马" tabindex="-1">盒马 <a class="header-anchor" href="#盒马" aria-label="Permalink to &quot;盒马&quot;">​</a></h2><p>两道笔试题</p><ul><li>写diff代码</li><li>计算流程中审批节点的最大深度</li></ul>`,86),t=[e];function h(p,k,r,d,o,E){return l(),s("div",null,t)}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
