import{_ as s,c as a,o as i,V as n}from"./chunks/framework.e0zpvRJ8.js";const b=JSON.parse('{"title":"Docker容器","description":"","frontmatter":{},"headers":[],"relativePath":"share/server/docker.md","filePath":"share/server/docker.md","lastUpdated":1657172225000}'),t={name:"share/server/docker.md"},e=n(`<h1 id="docker容器" tabindex="-1">Docker容器 <a class="header-anchor" href="#docker容器" aria-label="Permalink to &quot;Docker容器&quot;">​</a></h1><p>Docker是一个在称为“容器”（或Docker容器）的孤立环境中可运行应用程序的平台。 像Jenkins这样的应用程序可以作为只读的“镜像”（或Docker镜像）下载， 每个镜像都作为容器在Docker中运行。Docker容器实际上是Docker镜像的“运行实例”。 从这个角度来看，镜像永久存储（只要镜像更新发布），而容器暂时存储</p><h2 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install docker</span></span></code></pre></div><h3 id="镜像列表" tabindex="-1">镜像列表 <a class="header-anchor" href="#镜像列表" aria-label="Permalink to &quot;镜像列表&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span></code></pre></div><table><thead><tr><th>输出信息</th><th>REPOSITORY</th><th>TAG</th><th>IMAGE ID</th><th>CREATED</th><th>SIZE</th></tr></thead><tbody><tr><td>示例</td><td>jenkinsci/blueocean</td><td>latest</td><td>27841aff0161</td><td>40 hours ago</td><td>745MB</td></tr><tr><td>说明</td><td>镜像的仓库源</td><td>镜像的标签</td><td>镜像ID</td><td>镜像创建时间</td><td>镜像大小</td></tr></tbody></table><h3 id="容器列表" tabindex="-1">容器列表 <a class="header-anchor" href="#容器列表" aria-label="Permalink to &quot;容器列表&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看正在运行的容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span></code></pre></div><p>常用参数：</p><ul><li>-a:显示所有的容器，包括未运行的</li><li>-l:显示最近创建的容器</li></ul><table><thead><tr><th>输出信息</th><th>CONTAINER ID</th><th>IMAGE</th><th>COMMAND</th><th>CREATED</th><th>STATUS</th><th>PORTS</th><th>NAMES</th></tr></thead><tbody><tr><td>示例</td><td>45f4a118dddc</td><td>jenkinsci/blueocean</td><td>&quot;/sbin/tini -- /usr/…&quot;</td><td>17 hours ago</td><td>Exited (137) 9 minutes ago</td><td>PORTS</td><td>Jenkins</td></tr><tr><td>说明</td><td>容器 ID</td><td>使用的镜像</td><td>启动容器时运行的命令</td><td>容器的创建时间</td><td>容器状态</td><td>容器的端口信息和使用的连接类型（tcp\\udp）</td><td>自动分配的容器名称</td></tr></tbody></table><h3 id="删除容器和镜像" tabindex="-1">删除容器和镜像 <a class="header-anchor" href="#删除容器和镜像" aria-label="Permalink to &quot;删除容器和镜像&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 停止,containerId 是容器的ID</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop containerId</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除所有已停止的容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps -a -q)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm containerId</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi imageId </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart gitlab</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看一个容器的详情</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect 容器ID/容器别名</span></span></code></pre></div><h2 id="nginx" tabindex="-1">nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;nginx&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 搜索镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> search nginx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取镜像,官方推荐\`jenkinsci/blueocean\`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull nginx</span></span></code></pre></div><h3 id="运行容器" tabindex="-1">运行容器 <a class="header-anchor" href="#运行容器" aria-label="Permalink to &quot;运行容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80 --name nginx nginx</span></span></code></pre></div><h3 id="访问" tabindex="-1">访问 <a class="header-anchor" href="#访问" aria-label="Permalink to &quot;访问&quot;">​</a></h3><p><code>http:ip:8000</code></p><h3 id="修改nginx配置" tabindex="-1">修改nginx配置 <a class="header-anchor" href="#修改nginx配置" aria-label="Permalink to &quot;修改nginx配置&quot;">​</a></h3><p>将nginx容器内部配置文件挂载到主机(把docker里面的nginx相关配置指向方便修改的目录)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/docker_nginx/www/html /usr/local/docker_nginx/logs /usr/local/docker_nginx/conf</span></span></code></pre></div><p>复制docker里面的nginx配置到以上目录</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拿到containerID</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp c155f99aa501:/etc/nginx/nginx.conf /usr/local/docker_nginx/conf</span></span></code></pre></div><h3 id="关闭并移除nginx容器" tabindex="-1">关闭并移除nginx容器 <a class="header-anchor" href="#关闭并移除nginx容器" aria-label="Permalink to &quot;关闭并移除nginx容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps -a -q)</span></span></code></pre></div><h3 id="正式启动nginx" tabindex="-1">正式启动nginx <a class="header-anchor" href="#正式启动nginx" aria-label="Permalink to &quot;正式启动nginx&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80 -v /usr/local/docker_nginx/www/html:/usr/share/nginx/html -v /usr/local/docker_nginx/conf:/etc/nginx/nginx -v /usr/local/docker_nginx/logs:/var/log/nginx --name nginx nginx</span></span></code></pre></div><p>默认访问页面是403，是因为<code>/usr/local/docker_nginx/www/html</code>下没有<code>index.html</code>文件</p><h2 id="jenkins" tabindex="-1">Jenkins <a class="header-anchor" href="#jenkins" aria-label="Permalink to &quot;Jenkins&quot;">​</a></h2><p>Jenkins是一款开源 CI&amp;CD 软件，用于自动化各种任务，包括构建、测试和部署软件。</p><p><a href="https://www.jenkins.io/zh/doc/book/installing/" target="_blank" rel="noreferrer">官方推荐安装</a></p><h3 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 搜索镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> search jenkins</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取镜像,官方推荐\`jenkinsci/blueocean\`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull jenkinsci/blueocean</span></span></code></pre></div><h3 id="创建映射目录" tabindex="-1">创建映射目录 <a class="header-anchor" href="#创建映射目录" aria-label="Permalink to &quot;创建映射目录&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/jenkins_home/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chown</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:1000 /var/jenkins_home　　# docker容器中jenkins用户和用户组id为1000，需要修改后目录才能映射成功</span></span></code></pre></div><h3 id="启动容器" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器" aria-label="Permalink to &quot;启动容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:8080 -v /var/jenkins_home/:/var/jenkins_home/ --name=&quot;jenkins&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkinsci/blueocean</span></span></code></pre></div><ul><li><code>-d</code> 在后台运行容器（即“分离”模式）并输出容器ID</li><li><code>-p 9000:8080</code> 将容器的<code>8080</code>端口映射到服务器的<code>9000</code>端口</li><li><code>-v /var/jenkins_home:/var/jenkins_home</code> <code>/var/jenkins_home</code>目录为容器jenkins工作目录，我们将硬盘上的一个目录挂载到这个位置，方便后续更新镜像后继续使用原来的工作目录。这里我们设置的就是上面我们创建的 <code>/var/jenkins_home</code>目录</li><li><code>-v /etc/localtime:/etc/localtime</code>让容器使用和服务器同样的时间设置</li><li><code>--name=&quot;Jenkins&quot;</code> 给容器起一个别名</li></ul><h3 id="是否启动成功" tabindex="-1">是否启动成功 <a class="header-anchor" href="#是否启动成功" aria-label="Permalink to &quot;是否启动成功&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重新启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart jenkins</span></span></code></pre></div><h3 id="访问-1" tabindex="-1">访问 <a class="header-anchor" href="#访问-1" aria-label="Permalink to &quot;访问&quot;">​</a></h3><p><code>http://ip:9000</code></p><h3 id="解锁jenkins" tabindex="-1">解锁Jenkins <a class="header-anchor" href="#解锁jenkins" aria-label="Permalink to &quot;解锁Jenkins&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/jenkins_home/secrets/initialAdminPassword</span></span></code></pre></div><h2 id="gitlab" tabindex="-1">Gitlab <a class="header-anchor" href="#gitlab" aria-label="Permalink to &quot;Gitlab&quot;">​</a></h2><h3 id="安装-2" tabindex="-1">安装 <a class="header-anchor" href="#安装-2" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 搜索镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> search gitlab</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull gitlab/gitlab-ce</span></span></code></pre></div><h3 id="创建挂载的目录" tabindex="-1">创建挂载的目录 <a class="header-anchor" href="#创建挂载的目录" aria-label="Permalink to &quot;创建挂载的目录&quot;">​</a></h3><p>将gitLab 的配置 (config) 、 日志 (logs) 、数据 (data) 放到容器之外， 便于日后升级</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/gitlab/config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/gitlab/logs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/gitlab/data</span></span></code></pre></div><h3 id="启动容器-1" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器-1" aria-label="Permalink to &quot;启动容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8443</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:443 -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8099</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80 -v /var/gitlab/config:/etc/gitlab -v /var/gitlab/logs:/var/log/gitlab -v /var/gitlab/data:/var/opt/gitlab --name=&quot;gitlab&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitlab/gitlab-ce</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -d：后台运行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -p：将容器内部端口向外映射</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --name：命名容器名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录</span></span></code></pre></div><h3 id="配置gitlab主机名" tabindex="-1">配置gitLab主机名 <a class="header-anchor" href="#配置gitlab主机名" aria-label="Permalink to &quot;配置gitLab主机名&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/gitlab/config/gitlab.rb</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 配置http协议所使用的访问地址,不加端口号默认为</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">external_url &#39;http:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//120.53.120.55&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 配置ssh协议所使用的访问地址和端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gitlab_rails[</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&#39;gitlab_ssh_host&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] = &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120.53</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120.55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gitlab_rails[</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&#39;gitlab_shell_ssh_port&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2222</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 此端口是run时</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">端口映射的</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2222</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">端口</span></span></code></pre></div><p>修改<code>/var/gitlab/data/gitlab-rails/etc/gitlab.yml</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将port改为8099</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/var/gitlab/data/gitlab-rails/etc/gitlab.yml</span></span></code></pre></div><h3 id="访问-2" tabindex="-1">访问 <a class="header-anchor" href="#访问-2" aria-label="Permalink to &quot;访问&quot;">​</a></h3><p>通过访问<code>http://ip:8099</code>来访问gitlab</p><div class="danger custom-block"><p class="custom-block-title">警告</p><p>如果服务器内存太小（低于2G），是无法运行gitlab的,提示如下：</p><p><code>Whoops, GitLab is taking too much time to respond.</code></p></div><h2 id="禅道" tabindex="-1">禅道 <a class="header-anchor" href="#禅道" aria-label="Permalink to &quot;禅道&quot;">​</a></h2><p><a href="https://www.zentao.net/book/zentaopmshelp/405.html#5" target="_blank" rel="noreferrer">官方推荐</a></p><h3 id="安装-3" tabindex="-1">安装 <a class="header-anchor" href="#安装-3" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 搜索镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> search zentao</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull easysoft/zentao:12.5.3</span></span></code></pre></div><h3 id="启动容器-2" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器-2" aria-label="Permalink to &quot;启动容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8088</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80 -v /www/zentaopms:/www/zentaopms -v /www/mysqldata:/var/lib/mysql --name zentao easysoft/zentao:12.5.3</span></span></code></pre></div><h3 id="访问-3" tabindex="-1">访问 <a class="header-anchor" href="#访问-3" aria-label="Permalink to &quot;访问&quot;">​</a></h3><p><code>http://ip:8088</code></p>`,71),l=[e];function h(p,k,d,r,o,c){return i(),a("div",null,l)}const F=s(t,[["render",h]]);export{b as __pageData,F as default};
