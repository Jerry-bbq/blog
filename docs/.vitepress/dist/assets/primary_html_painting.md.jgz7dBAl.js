import{_ as e,c as a,o as t,V as r}from"./chunks/framework.e0zpvRJ8.js";const o="/assets/webkit-painting.hZ0mzFCx.png",u=JSON.parse('{"title":"浏览器的渲染过程","description":"","frontmatter":{},"headers":[],"relativePath":"primary/html/painting.md","filePath":"primary/html/painting.md","lastUpdated":1657430464000}'),i={name:"primary/html/painting.md"},s=r('<h1 id="浏览器的渲染过程" tabindex="-1">浏览器的渲染过程 <a class="header-anchor" href="#浏览器的渲染过程" aria-label="Permalink to &quot;浏览器的渲染过程&quot;">​</a></h1><p>\b\b以webkit渲染的为例:</p><p><img src="'+o+'" alt="\b\bwebkit渲染过程"></p><h2 id="_1-解析html生成dom树" tabindex="-1">1.解析HTML生成DOM树 <a class="header-anchor" href="#_1-解析html生成dom树" aria-label="Permalink to &quot;1.解析HTML生成DOM树&quot;">​</a></h2><p>当浏览器接收到服务器响应来的HTML文档后，会遍历文档节点，<code>HTML Parser</code>将HTML标记解析成DOM Tree</p><h2 id="_2-解析css生成cssom规则树" tabindex="-1">2.解析CSS生成CSSOM规则树 <a class="header-anchor" href="#_2-解析css生成cssom规则树" aria-label="Permalink to &quot;2.解析CSS生成CSSOM规则树&quot;">​</a></h2><p><code>CSS Parse</code>将每个CSS文件都被解析成一个StyleSheet对象，每个对象都包含Style Rules，Style Rules也叫CSSOM（CSS Object Model）</p><h2 id="_3-将dom树与cssom规则树合并在一起生成rendertree渲染树" tabindex="-1">3. 将DOM树与CSSOM规则树合并在一起生成RenderTree渲染树 <a class="header-anchor" href="#_3-将dom树与cssom规则树合并在一起生成rendertree渲染树" aria-label="Permalink to &quot;3. 将DOM树与CSSOM规则树合并在一起生成RenderTree渲染树&quot;">​</a></h2><p>Render Tree的构建其实就是DOM Tree和CSSOM Attach的过程(每个 DOM 节点都有一个“attach”方法)</p><h2 id="_4-遍历渲染树开始布局-计算每个节点的位置、大小-layout-回流" tabindex="-1">4.遍历渲染树开始布局，计算每个节点的位置、大小（Layout(回流） <a class="header-anchor" href="#_4-遍历渲染树开始布局-计算每个节点的位置、大小-layout-回流" aria-label="Permalink to &quot;4.遍历渲染树开始布局，计算每个节点的位置、大小（Layout(回流）&quot;">​</a></h2><p>创建渲染树后，下一步就是布局<code>Layout</code>,或者叫回流（reflow），这个过程就是通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸，将其安置在浏览器窗口的正确位置，而有些时候我们会在文档布局完成后对DOM进行修改，这时候可能需要重新进行布局，也可称其为回流，本质上还是一个布局的过程，每一个渲染对象都有一个布局或者回流方法，实现其布局或回流。</p><h2 id="_5-将渲染树每个节点绘制到屏幕" tabindex="-1">5.将渲染树每个节点绘制到屏幕 <a class="header-anchor" href="#_5-将渲染树每个节点绘制到屏幕" aria-label="Permalink to &quot;5.将渲染树每个节点绘制到屏幕&quot;">​</a></h2><p>在绘制阶段，系统会遍历渲染树，并调用渲染器的<code>Painting</code>方法，将渲染器的内容显示在屏幕上</p><div class="tip custom-block"><p class="custom-block-title">说明</p><ul><li>在构建DOM Tree的过程中可能会被CSS或者JS的加载而执行阻塞</li><li>解析DOM和解析CSS同时进行，但是与JS执行是互斥的</li></ul></div>',14),l=[s];function c(n,d,h,p,_,S){return t(),a("div",null,l)}const b=e(i,[["render",c]]);export{u as __pageData,b as default};
