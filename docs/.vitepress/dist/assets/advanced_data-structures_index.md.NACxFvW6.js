import{_ as a,c as e,o as t,V as r}from"./chunks/framework.e0zpvRJ8.js";const k=JSON.parse('{"title":"数据结构","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/data-structures/index.md","filePath":"advanced/data-structures/index.md","lastUpdated":null}'),i={name:"advanced/data-structures/index.md"},d=r('<h1 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h1><h2 id="数组-array" tabindex="-1">数组（Array） <a class="header-anchor" href="#数组-array" aria-label="Permalink to &quot;数组（Array）&quot;">​</a></h2><p>一组有序的数据集合，可以通过下标快速访问对应元素，支持动态扩容和缩容操作，但在插入、删除等操作时需要移动元素。</p><h2 id="栈-stack" tabindex="-1">栈（Stack） <a class="header-anchor" href="#栈-stack" aria-label="Permalink to &quot;栈（Stack）&quot;">​</a></h2><p>一种先进后出（Last-In-First-Out，LIFO）的数据结构，可以使用数组或链表来实现。栈的应用包括递归、括号匹配、表达式计算等。</p><h2 id="队列-queue" tabindex="-1">队列（Queue） <a class="header-anchor" href="#队列-queue" aria-label="Permalink to &quot;队列（Queue）&quot;">​</a></h2><p>一种先进先出（First-In-First-Out，FIFO）的数据结构，同样可以使用数组或链表来实现。队列的应用包括消息队列、任务调度等。</p><h2 id="链表-linked-list" tabindex="-1">链表（Linked List） <a class="header-anchor" href="#链表-linked-list" aria-label="Permalink to &quot;链表（Linked List）&quot;">​</a></h2><p>一种动态数据结构，由节点和指针组成，可以快速在任意位置插入和删除元素，但需要遍历整个链表才能访问某个元素。</p><h2 id="树-tree" tabindex="-1">树（Tree） <a class="header-anchor" href="#树-tree" aria-label="Permalink to &quot;树（Tree）&quot;">​</a></h2><p>一种分层的数据结构，由节点和边组成，根据节点之间的关系可以分为二叉树、多叉树等。树的应用包括搜索、排序、哈夫曼编码等。</p><h2 id="图-graph" tabindex="-1">图（Graph） <a class="header-anchor" href="#图-graph" aria-label="Permalink to &quot;图（Graph）&quot;">​</a></h2><p>由节点和边组成的数据结构，可以表示多种实体之间的关系，包括社交网络、地图、路由等。</p><p>除此之外，还有一些常用的数据结构，如哈希表、堆（Heap）、字典（Map）、集合（Set）等。每种数据结构都有其适用的场景和特点，开发者需要根据具体需求选择合适的数据结构。</p>',14),n=[d];function s(o,h,l,c,u,p){return t(),e("div",null,n)}const m=a(i,[["render",s]]);export{k as __pageData,m as default};
