import{_ as t,c as e,o as a,V as r}from"./chunks/framework.jq6gLv6S.js";const o="/blog/assets/dns.if9TRe6k.png",P=JSON.parse('{"title":"html5相关","description":"","frontmatter":{},"headers":[],"relativePath":"primary/html/other.md","filePath":"primary/html/other.md","lastUpdated":1707813350000}'),l={name:"primary/html/other.md"},d=r('<h1 id="html5相关" tabindex="-1">html5相关 <a class="header-anchor" href="#html5相关" aria-label="Permalink to &quot;html5相关&quot;">​</a></h1><h2 id="浏览器中输入url回车发生了什么" tabindex="-1">浏览器中输入url回车发生了什么 <a class="header-anchor" href="#浏览器中输入url回车发生了什么" aria-label="Permalink to &quot;浏览器中输入url回车发生了什么&quot;">​</a></h2><ol><li>对URL地址进行<code>DNS</code>域名解析找到对应的<code>IP</code>地址</li><li>建立<code>TCP</code>连接（三次握手）</li><li>浏览器发送<code>HTTP</code>请求报文</li><li>服务器返回<code>HTTP</code>响应报文</li><li>浏览器解析文档资源并渲染页面</li><li>关闭<code>TCP</code>连接（四次挥手）</li></ol><h3 id="dns解析" tabindex="-1">DNS解析 <a class="header-anchor" href="#dns解析" aria-label="Permalink to &quot;DNS解析&quot;">​</a></h3><p>DNS解析其实是一个递归的过程</p><p><img src="'+o+'" alt="DNS解析"></p><ul><li>输入www.google.com网址后，首先在<strong>本地的域名服务器</strong>中查找</li><li>没找到去<strong>根域名服务器</strong>查找</li><li>没有再去<strong>com顶级域名服务器</strong>查找，以此类推直到找到IP地址，然后把它记录在本地，供下次使用</li></ul><h3 id="发起tcp连接" tabindex="-1">发起TCP连接 <a class="header-anchor" href="#发起tcp连接" aria-label="Permalink to &quot;发起TCP连接&quot;">​</a></h3><h3 id="发送http请求" tabindex="-1">发送HTTP请求 <a class="header-anchor" href="#发送http请求" aria-label="Permalink to &quot;发送HTTP请求&quot;">​</a></h3><p>HTTP的端口为80/8080，而HTTPS的端口为443</p><p>发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口；请求报文由请求行，请求头，请求正文组成。</p><p>请求行的格式为<code>Method Request-URL HTTP-Version CRLF eg: GET index.html HTTP/1.1 </code>常用的方法有: GET, POST, PUT, DELETE, OPTIONS, HEAD等。</p><p><a href="https://juejin.cn/post/6844903832435032072" target="_blank" rel="noreferrer">参考</a></p><h2 id="href和src的区别" tabindex="-1">href和src的区别 <a class="header-anchor" href="#href和src的区别" aria-label="Permalink to &quot;href和src的区别&quot;">​</a></h2><table><thead><tr><th>属性</th><th>解释</th><th>使用</th><th>说明</th></tr></thead><tbody><tr><td>href</td><td>标记超文本引用</td><td>用在<code>link</code>和<code>a</code>标签等元素上</td><td>用来建立当前元素和文档之间的链接，浏览器解析时会标记该文档为css文档，并行下载资源并且不会停止对该文档的处理（这是为什么建议使用link方式加载css，而不是使用@import）</td></tr><tr><td>src</td><td>引用资源</td><td>用在<code>img</code>、<code>script</code>、<code>iframe</code>等上</td><td>当浏览器解析到src时，会暂停其他资源的下载和处理（图片不会暂停其他资源的下载和处理），直到将该资源加载、编译、执行完毕，图片和框架等也如此，类似于将所指向资源应用到当前内容。（这也是为什么建议把 js 脚本放在底部而不是头部的原因）</td></tr></tbody></table><h2 id="img标签中的alt和title属性的作用" tabindex="-1">img标签中的alt和title属性的作用 <a class="header-anchor" href="#img标签中的alt和title属性的作用" aria-label="Permalink to &quot;img标签中的alt和title属性的作用&quot;">​</a></h2><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>&lt;img src=&quot;&quot; alt=&quot;图片无法显示&quot;&gt;</td><td>如果无法显示图像，浏览器将显示alt指定的内容</td></tr><tr><td>&lt;img src=&quot;&quot; title=&quot;鼠标浮动显示&quot;&gt;</td><td>在鼠标移到元素上时显示title的内容</td></tr></tbody></table>',17),i=[d];function h(c,s,n,m,T,p){return a(),e("div",null,i)}const _=t(l,[["render",h]]);export{P as __pageData,_ as default};
