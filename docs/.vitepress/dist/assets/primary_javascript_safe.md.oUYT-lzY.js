import{_ as a,c as e,o as t,a5 as r}from"./chunks/framework.FI019Rde.js";const p=JSON.parse('{"title":"安全-CSRF/XSS","description":"","frontmatter":{},"headers":[],"relativePath":"primary/javascript/safe.md","filePath":"primary/javascript/safe.md","lastUpdated":1657430464000}'),i={name:"primary/javascript/safe.md"},l=r('<h1 id="安全-csrf-xss" tabindex="-1">安全-CSRF/XSS <a class="header-anchor" href="#安全-csrf-xss" aria-label="Permalink to &quot;安全-CSRF/XSS&quot;">​</a></h1><h2 id="csrf-跨站请求伪造" tabindex="-1">CSRF-跨站请求伪造 <a class="header-anchor" href="#csrf-跨站请求伪造" aria-label="Permalink to &quot;CSRF-跨站请求伪造&quot;">​</a></h2><ul><li><a href="https://tech.meituan.com/2018/10/11/fe-security-csrf.html" target="_blank" rel="noreferrer">如何防止CSRF攻击</a></li></ul><p><code>CSRF</code>（Cross-site request forgery）<strong>跨站请求伪造</strong>：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><p>一个典型的CSRF攻击有着如下的流程：</p><ul><li>受害者登录a.com，并保留了登录凭证（Cookie）。</li><li>攻击者引诱受害者访问了b.com。</li><li>b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。</li><li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。</li><li>a.com以受害者的名义执行了act=xx。</li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。</li></ul><h3 id="防御措施" tabindex="-1">防御措施 <a class="header-anchor" href="#防御措施" aria-label="Permalink to &quot;防御措施&quot;">​</a></h3><ul><li>Token验证</li><li>Referer验证：只接受本站的请求，服务器才做响应；如果不是，就拦截</li><li>隐藏令牌：把 token 隐藏在 http 的 head头中</li></ul><h2 id="xss-跨域脚本攻击" tabindex="-1">XSS-跨域脚本攻击 <a class="header-anchor" href="#xss-跨域脚本攻击" aria-label="Permalink to &quot;XSS-跨域脚本攻击&quot;">​</a></h2><ul><li><a href="https://tech.meituan.com/2018/09/27/fe-security.html" target="_blank" rel="noreferrer">如何防止XSS攻击</a></li></ul><p>Cross-site Scripting，中文<code>跨域脚本攻击</code></p><p>向页面中注入js脚本，篡改网页内容</p><h3 id="攻击类型" tabindex="-1">攻击类型 <a class="header-anchor" href="#攻击类型" aria-label="Permalink to &quot;攻击类型&quot;">​</a></h3><ul><li>存储型</li><li>反射型</li><li>DOM型</li></ul><h3 id="防御措施-1" tabindex="-1">防御措施 <a class="header-anchor" href="#防御措施-1" aria-label="Permalink to &quot;防御措施&quot;">​</a></h3><ul><li>HttpOnly 防止劫取 Cookie</li><li>输入检查</li><li>输出检查</li></ul>',16),o=[l];function s(c,n,h,d,u,m){return t(),e("div",null,o)}const _=a(i,[["render",s]]);export{p as __pageData,_ as default};
