import{_ as a,c as l,o as e,V as t}from"./chunks/framework.jq6gLv6S.js";const p=JSON.parse('{"title":"JavaScript数据结构与算法","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/data-structures-and-algorithms/index.md","filePath":"advanced/data-structures-and-algorithms/index.md","lastUpdated":1707813350000}'),i={name:"advanced/data-structures-and-algorithms/index.md"},r=t('<h1 id="javascript数据结构与算法" tabindex="-1">JavaScript数据结构与算法 <a class="header-anchor" href="#javascript数据结构与算法" aria-label="Permalink to &quot;JavaScript数据结构与算法&quot;">​</a></h1><h2 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h2><h3 id="线性表" tabindex="-1">线性表 <a class="header-anchor" href="#线性表" aria-label="Permalink to &quot;线性表&quot;">​</a></h3><p>就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。数组、链表、队列、栈 等就是线性表结构。</p><ul><li><a href="./array.html">数组 Array</a></li><li><a href="./stack.html">栈 Stack</a></li><li><a href="./queue.html">队列和双端队列 Quene</a></li><li>链表 linked <ul><li><a href="./linked-list.html">链表数据结构</a></li><li><a href="./doubly-linked-list.html">双向链表</a></li><li><a href="./circular-linked-list.html">循环链表</a></li><li><a href="./sorted-linked-list.html">有序链表</a></li><li><a href="./stack-linked-list.html">使用链表模拟栈</a></li></ul></li></ul><h3 id="非线性表" tabindex="-1">非线性表 <a class="header-anchor" href="#非线性表" aria-label="Permalink to &quot;非线性表&quot;">​</a></h3><p>数据之间并不是简单的前后关系。二叉树、堆、图 就是非线性表</p><ul><li><a href="./set.html">集合 Set</a></li><li><a href="./dictionary.html">字典和散列表 Dictionary</a></li><li><a href="./recursive.html">递归</a></li><li>树 <ul><li><a href="./bst.html">二叉树和二叉搜索树</a></li><li>自平衡树 <ul><li><a href="./avl-tree.html">AVL树</a></li><li><a href="./red-black-tree.html">红黑树</a></li></ul></li></ul></li><li><a href="./minHeap.html">二叉堆和堆排序 Heap</a></li><li><a href="./graph.html">图 Graph</a></li></ul><h2 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h2><ul><li><a href="./sort-and-search.html">排序和搜索算法</a></li><li><a href="./algorithm-skill.html">算法设计与技巧</a></li><li><a href="./algorithm-complexity.html">算法复杂度</a></li></ul><p><a href="https://github.com/loiane/javascript-datastructures-algorithms" target="_blank" rel="noreferrer">数据结构与算法源码</a></p><ul><li><a href="https://github.com/biaochenxuying/blog/issues/34" target="_blank" rel="noreferrer">参考</a></li></ul>',12),h=[r];function s(n,o,d,c,u,m){return e(),l("div",null,h)}const _=a(i,[["render",s]]);export{p as __pageData,_ as default};
