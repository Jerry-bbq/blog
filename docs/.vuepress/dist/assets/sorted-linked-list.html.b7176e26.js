import{_ as n,o as s,c as a,e as t}from"./app.515d390f.js";const p={},e=t(`<h1 id="\u6709\u5E8F\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u6709\u5E8F\u94FE\u8868" aria-hidden="true">#</a> \u6709\u5E8F\u94FE\u8868</h1><h2 id="\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a> \u5B9A\u4E49</h2><p><strong>\u6709\u5E8F\u94FE\u8868</strong>\u662F\u6307\u4FDD\u6301\u5143\u7D20\u6709\u5E8F\u7684\u94FE\u8868\u7ED3\u6784\u3002\u9664\u4E86\u4F7F\u7528\u6392\u5E8F\u7B97\u6CD5\u4E4B\u5916\uFF0C\u6211\u4EEC\u8FD8\u53EF\u4EE5\u5C06\u5143\u7D20\u63D2\u5165\u5230\u6B63\u786E\u7684\u4F4D\u7F6E\u6765\u4FDD\u8BC1\u94FE\u8868\u7684\u6709\u5E8F\u6027\u3002</p><h2 id="\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0" aria-hidden="true">#</a> \u5B9E\u73B0</h2><h3 id="\u5DE5\u5177\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u5DE5\u5177\u51FD\u6570" aria-hidden="true">#</a> \u5DE5\u5177\u51FD\u6570</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> Compare <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">LESS_THAN</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BIGGER_THAN</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">defaultCompare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span> <span class="token operator">:</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>\u5982\u679C\u5143\u7D20\u6709\u76F8\u540C\u7684\u5F15\u7528\uFF0C\u5B83\u5C31\u8FD4\u56DE 0</li><li>\u5982\u679C\u7B2C\u4E00\u4E2A\u5143\u7D20\u5C0F\u4E8E\u7B2C\u4E8C\u4E2A\u5143\u7D20\uFF0C\u5B83\u5C31\u8FD4\u56DE-1\uFF0C\u53CD\u4E4B\u5219\u8FD4\u56DE 1</li></ul><h3 id="\u94FE\u8868\u7C7B" tabindex="-1"><a class="header-anchor" href="#\u94FE\u8868\u7C7B" aria-hidden="true">#</a> \u94FE\u8868\u7C7B</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SortedLinkedList</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedList</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">equalsFn <span class="token operator">=</span> defaultEquals<span class="token punctuation">,</span> compareFn <span class="token operator">=</span> defaultCompare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>equalsFn<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>compareFn <span class="token operator">=</span> compareFn
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u63D2\u5165\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u63D2\u5165\u5143\u7D20" aria-hidden="true">#</a> \u63D2\u5165\u5143\u7D20</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIndexNextSortedElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> pos<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">getIndexNextSortedElement</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> comp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareFn</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> current<span class="token punctuation">.</span>element<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>comp <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> i
    <span class="token punctuation">}</span>
    current <span class="token operator">=</span> current<span class="token punctuation">.</span>next
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> i
<span class="token punctuation">}</span>
</code></pre></div>`,11),o=[e];function c(l,u){return s(),a("div",null,o)}var k=n(p,[["render",c],["__file","sorted-linked-list.html.vue"]]);export{k as default};
