import{_ as n,o as s,c as a,e as p}from"./app.515d390f.js";const t={},o=p(`<h1 id="\u6811\u5F62\u7ED3\u6784\u64CD\u4F5C" tabindex="-1"><a class="header-anchor" href="#\u6811\u5F62\u7ED3\u6784\u64CD\u4F5C" aria-hidden="true">#</a> \u6811\u5F62\u7ED3\u6784\u64CD\u4F5C</h1><h2 id="\u5E73\u94FA\u6811" tabindex="-1"><a class="header-anchor" href="#\u5E73\u94FA\u6811" aria-hidden="true">#</a> \u5E73\u94FA\u6811</h2><p>\u5C06\u6811\u5F62\u7ED3\u6784\u5E73\u94FA\u4E3A\u6570\u7EC4\uFF0C\u5E76\u5220\u9664<code>children</code>\u5B57\u6BB5</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">treeToList</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token string">&#39;children&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> queen <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  queen <span class="token operator">=</span> queen<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>queen<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> first <span class="token operator">=</span> queen<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">[</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      queen <span class="token operator">=</span> queen<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>first<span class="token punctuation">[</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token keyword">delete</span> first<span class="token punctuation">[</span>children<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    out<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> out
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u5C06\u6570\u7EC4\u8F6C\u5316\u4E3A\u6811\u5F62\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u5C06\u6570\u7EC4\u8F6C\u5316\u4E3A\u6811\u5F62\u7ED3\u6784" aria-hidden="true">#</a> \u5C06\u6570\u7EC4\u8F6C\u5316\u4E3A\u6811\u5F62\u7ED3\u6784</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> parentId <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> itemArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> node <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>parentId <span class="token operator">===</span> parentId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> newNode <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>node<span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> node<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> node<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token function">convert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> node<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
      itemArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> itemArr
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u8BBE\u7F6E\u5C42\u7EA7" tabindex="-1"><a class="header-anchor" href="#\u8BBE\u7F6E\u5C42\u7EA7" aria-hidden="true">#</a> \u8BBE\u7F6E\u5C42\u7EA7</h2><p>\u9012\u5F52\u904D\u5386\u6811\u5F62\u7ED3\u6784\uFF0C\u8BBE\u7F6E\u5C42\u7EA7<code>level</code></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> arrayTreeSetLevel <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">,</span> levelName <span class="token operator">=</span> <span class="token string">&#39;level&#39;</span><span class="token punctuation">,</span> childrenName <span class="token operator">=</span> <span class="token string">&#39;children&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> <span class="token function-variable function">recursive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">tree<span class="token punctuation">,</span> level <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    level<span class="token operator">++</span>
    <span class="token keyword">return</span> tree<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      v<span class="token punctuation">[</span>levelName<span class="token punctuation">]</span> <span class="token operator">=</span> level
      <span class="token keyword">const</span> child <span class="token operator">=</span> v<span class="token punctuation">[</span>childrenName<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token function">recursive</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> level<span class="token punctuation">)</span>
      <span class="token keyword">return</span> v
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">recursive</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>`,9),e=[o];function c(u,l){return s(),a("div",null,e)}var k=n(t,[["render",c],["__file","tree-operate.html.vue"]]);export{k as default};
