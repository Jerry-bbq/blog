import{_ as p,r as t,o,c as e,b as n,d as c,e as a,a as u}from"./app.bd7fd82c.js";var l="/blog/assets/bubbleSort.9a17ae79.png",k="/blog/assets/modifiedBubbleSort.67052a9b.png",r="/blog/assets/selectionSort.f5daff9f.png",i="/blog/assets/insertionSort.4bb49387.png",d="/blog/assets/mergeSort.6e28ea02.png",m="/blog/assets/quickSort_1.5a6a9642.png",y="/blog/assets/quickSort_2.7a1d830d.png",f="/blog/assets/quickSort_3.bffe8e80.png",b="/blog/assets/quickSort_4.2ad498d5.png",h="/blog/assets/quickSort_5.185a431a.png",w="/blog/assets/countingSort.559e5242.png";const g={},_=n("h1",{id:"\u6392\u5E8F\u548C\u641C\u7D22\u7B97\u6CD5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u6392\u5E8F\u548C\u641C\u7D22\u7B97\u6CD5","aria-hidden":"true"},"#"),a(" \u6392\u5E8F\u548C\u641C\u7D22\u7B97\u6CD5")],-1),S=n("h2",{id:"\u6392\u5E8F\u7B97\u6CD5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u6392\u5E8F\u7B97\u6CD5","aria-hidden":"true"},"#"),a(" \u6392\u5E8F\u7B97\u6CD5")],-1),j={href:"https://visualgo.net/zh/sorting",target:"_blank",rel:"noopener noreferrer"},x=a("\u52A8\u753B\u6F14\u793A"),v=u(`<ul><li>\u5192\u6CE1\u6392\u5E8F</li><li>\u9009\u62E9\u6392\u5E8F</li><li>\u63D2\u5165\u6392\u5E8F</li><li>\u5E0C\u5C14\u6392\u5E8F</li><li>\u5F52\u5E76\u6392\u5E8F</li><li>\u5FEB\u901F\u6392\u5E8F</li><li>\u8BA1\u6570\u6392\u5E8F</li><li>\u6876\u6392\u5E8F</li><li>\u57FA\u6570\u6392\u5E8F</li></ul><p>\u4ECE\u6700\u6162\u7684\u4E00\u4E2A\u5F00\u59CB\uFF0C\u63A5\u7740\u662F\u4E00\u4E9B\u6027\u80FD\u8F83\u597D\u7684\u7B97\u6CD5</p><h3 id="\u5192\u6CE1\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5192\u6CE1\u6392\u5E8F" aria-hidden="true">#</a> \u5192\u6CE1\u6392\u5E8F</h3><ul><li>\u6BD4\u8F83\u6240\u6709\u76F8\u90BB\u7684\u4E24\u4E2A\u9879\uFF0C\u5982\u679C\u7B2C\u4E00\u4E2A\u6BD4\u7B2C\u4E8C\u4E2A\u5927\uFF0C\u5219\u4EA4\u6362\u5B83\u4EEC</li><li>\u65F6\u95F4\u590D\u6742\u5EA6\u662F O(n\xB2)</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> Compare <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">LESS_THAN</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BIGGER_THAN</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">defaultCompare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span> <span class="token operator">:</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u4EA4\u6362\u51FD\u6570</span>
<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>a<span class="token punctuation">]</span>
  array<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>b<span class="token punctuation">]</span>
  array<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> compareFn <span class="token operator">=</span> defaultCompare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> array
  <span class="token comment">// \u5916\u5FAA\u73AF</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5185\u5FAA\u73AF</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareFn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> array
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// [1, 2, 3, 4, 5]</span>
</code></pre></div><p>\u8BF4\u660E\uFF1A</p><ul><li>\u5916\u5FAA\u73AF\uFF1A\u4F1A\u4ECE\u6570\u7EC4\u7684\u7B2C\u4E00\u4F4D\u8FED\u4EE3\u81F3\u6700\u540E\u4E00\u4F4D\uFF0C\u5B83\u63A7\u5236\u4E86\u5728\u6570\u7EC4\u4E2D\u7ECF\u8FC7\u591A\u5C11\u8F6E\u6392\u5E8F\uFF08\u5E94\u8BE5\u662F\u6570\u7EC4\u4E2D\u6BCF\u9879\u90FD\u7ECF\u8FC7\u4E00\u8F6E\uFF0C\u8F6E\u6570\u548C\u6570\u7EC4\u957F\u5EA6\u4E00\u81F4\uFF09\u3002</li><li>\u5185\u5FAA\u73AF\uFF1A\u5C06\u4ECE\u7B2C\u4E00\u4F4D\u8FED\u4EE3\u81F3\u5012\u6570\u7B2C\u4E8C\u4F4D\uFF0C\u5185\u5FAA\u73AF\u5B9E\u9645\u4E0A\u8FDB\u884C\u5F53\u524D\u9879\u548C\u4E0B\u4E00\u9879\u7684\u6BD4\u8F83</li><li>\u5F53\u524D\u9879\u6BD4\u4E0B\u4E00\u9879\u5927\uFF0C\u5219\u4EA4\u6362\u5B83\u4EEC</li></ul><p>\u8FC7\u7A0B\u56FE\u89E3\uFF1A</p><p><img src="`+l+`" alt="bubbleSort"></p><p>\u95EE\u9898\uFF1A</p><p>\u6CE8\u610F\u5F53\u7B97\u6CD5\u6267\u884C\u5916\u5FAA\u73AF\u7684\u7B2C\u4E8C\u8F6E\u7684\u65F6\u5019\uFF0C\u6570\u5B57 4 \u548C 5 \u5DF2\u7ECF\u662F\u6B63\u786E\u6392\u5E8F\u7684\u4E86\u3002\u5C3D\u7BA1\u5982\u6B64\uFF0C\u5728\u540E\u7EED\u6BD4\u8F83\u4E2D\uFF0C\u5B83\u4EEC\u8FD8\u5728\u4E00\u76F4\u8FDB\u884C\u7740\u6BD4\u8F83\uFF0C\u5373\u4F7F\u8FD9\u662F\u4E0D\u5FC5\u8981\u7684</p><h3 id="\u6539\u8FDB\u540E\u7684\u5192\u6CE1\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u6539\u8FDB\u540E\u7684\u5192\u6CE1\u6392\u5E8F" aria-hidden="true">#</a> \u6539\u8FDB\u540E\u7684\u5192\u6CE1\u6392\u5E8F</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> Compare <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">LESS_THAN</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BIGGER_THAN</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">defaultCompare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span> <span class="token operator">:</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u4EA4\u6362\u51FD\u6570</span>
<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>a<span class="token punctuation">]</span>
  array<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>b<span class="token punctuation">]</span>
  array<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">modifiedBubbleSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> compareFn <span class="token operator">=</span> defaultCompare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> array
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareFn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> array
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FC7\u7A0B\u56FE\u89E3\uFF1A</p><p><img src="`+k+`" alt="modifiedBubbleSort"></p><h3 id="\u9009\u62E9\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u9009\u62E9\u6392\u5E8F" aria-hidden="true">#</a> \u9009\u62E9\u6392\u5E8F</h3><ul><li>\u5927\u81F4\u7684\u601D\u8DEF\u662F\u627E\u5230\u6570\u636E\u7ED3\u6784\u4E2D\u7684\u6700\u5C0F\u503C\u5E76\u5C06\u5176\u653E\u7F6E\u5728\u7B2C\u4E00\u4F4D\uFF0C\u63A5\u7740\u627E\u5230\u7B2C\u4E8C\u5C0F\u7684\u503C\u5E76\u5C06\u5176\u653E\u5728\u7B2C\u4E8C\u4F4D\uFF0C\u4EE5\u6B64\u7C7B\u63A8</li><li>\u65F6\u95F4\u590D\u6742\u5EA6\u662F O(n\xB2)</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> Compare <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">LESS_THAN</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BIGGER_THAN</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">defaultCompare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span> <span class="token operator">:</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u4EA4\u6362\u51FD\u6570</span>
<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>a<span class="token punctuation">]</span>
  array<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>b<span class="token punctuation">]</span>
  array<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> compareFn <span class="token operator">=</span> defaultCompare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> array
  <span class="token keyword">let</span> indexMin
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    indexMin <span class="token operator">=</span> i
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareFn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>indexMin<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        indexMin <span class="token operator">=</span> j
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> indexMin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> indexMin<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> array
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>\u8FC7\u7A0B\u56FE\u89E3\uFF1A</p><p><img src="`+r+`" alt="selectionSort"></p><h3 id="\u63D2\u5165\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u63D2\u5165\u6392\u5E8F" aria-hidden="true">#</a> \u63D2\u5165\u6392\u5E8F</h3><ul><li>\u6BCF\u6B21\u6392\u4E00\u4E2A\u6570\u7EC4\u9879\uFF0C\u4EE5\u6B64\u65B9\u5F0F\u6784\u5EFA\u6700\u540E\u7684\u6392\u5E8F\u6570\u7EC4\u3002</li><li>\u5047\u5B9A\u7B2C\u4E00\u9879\u5DF2\u7ECF\u6392\u5E8F\u4E86\u3002\u63A5\u7740\uFF0C\u5B83\u548C\u7B2C\u4E8C\u9879\u8FDB\u884C\u6BD4\u8F83\u2014\u2014\u7B2C\u4E8C\u9879\u662F\u5E94\u8BE5\u5F85\u5728\u539F\u4F4D\u8FD8\u662F\u63D2\u5230\u7B2C\u4E00\u9879\u4E4B\u524D\u5462\uFF1F\u8FD9\u6837\uFF0C\u5934\u4E24\u9879\u5C31\u5DF2\u6B63\u786E\u6392\u5E8F\uFF0C\u63A5\u7740\u548C\u7B2C\u4E09\u9879\u6BD4\u8F83\uFF08\u5B83\u662F\u8BE5\u63D2\u5165\u5230\u7B2C\u4E00\u3001\u7B2C\u4E8C\u8FD8\u662F\u7B2C\u4E09\u7684\u4F4D\u7F6E\u5462\uFF09\uFF0C\u4EE5\u6B64\u7C7B\u63A8</li><li>\u6392\u5E8F\u5C0F\u578B\u6570\u7EC4\u65F6\uFF0C\u6B64\u7B97\u6CD5\u6BD4\u9009\u62E9\u6392\u5E8F\u548C\u5192\u6CE1\u6392\u5E8F\u6027\u80FD\u8981\u597D</li><li>\u65F6\u95F4\u590D\u6742\u5EA6\u662F O(n\xB2)</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> Compare <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">LESS_THAN</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BIGGER_THAN</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">defaultCompare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span> <span class="token operator">:</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> compareFn <span class="token operator">=</span> defaultCompare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> array
  <span class="token keyword">let</span> temp
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> i
    temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">compareFn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
      j<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> array
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">insertionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>\u8FC7\u7A0B\u56FE\u89E3\uFF1A</p><p><img src="`+i+`" alt="insertionSort"></p><h3 id="\u5F52\u5E76\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5F52\u5E76\u6392\u5E8F" aria-hidden="true">#</a> \u5F52\u5E76\u6392\u5E8F</h3><p>\u5F52\u5E76\u6392\u5E8F\u662F\u4E00\u79CD\u5206\u800C\u6CBB\u4E4B\u7B97\u6CD5\u3002\u5176\u601D\u60F3\u662F\u5C06\u539F\u59CB\u6570\u7EC4\u5207\u5206\u6210\u8F83\u5C0F\u7684\u6570\u7EC4\uFF0C\u76F4\u5230\u6BCF\u4E2A\u5C0F\u6570\u7EC4\u53EA\u6709\u4E00\u4E2A\u4F4D\u7F6E\uFF0C\u63A5\u7740\u5C06\u5C0F\u6570\u7EC4\u5F52\u5E76\u6210\u8F83\u5927\u7684\u6570\u7EC4\uFF0C\u76F4\u5230\u6700\u540E\u53EA\u6709\u4E00\u4E2A\u6392\u5E8F\u5B8C\u6BD5\u7684\u5927\u6570\u7EC4</p><ul><li>\u662F\u7B2C\u4E00\u4E2A\u53EF\u4EE5\u5B9E\u9645\u4F7F\u7528\u7684\u6392\u5E8F\u7B97\u6CD5\u3002\u524D\u9762\u4E09\u4E2A\u6392\u5E8F\u7B97\u6CD5\u6027\u80FD\u4E0D\u597D\uFF0C\u4F46\u5F52\u5E76\u6392\u5E8F\u6027\u80FD\u4E0D\u9519</li><li>\u590D\u6742\u5EA6\u4E3A O(nlog(n))</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> Compare <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">LESS_THAN</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BIGGER_THAN</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">defaultCompare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span> <span class="token operator">:</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> compareFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> left<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">compareFn</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span> <span class="token operator">?</span> left<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> right<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> left<span class="token punctuation">.</span>length <span class="token operator">?</span> left<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">:</span> right<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> compareFn <span class="token operator">=</span> defaultCompare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> array
    <span class="token keyword">const</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">,</span> compareFn<span class="token punctuation">)</span>
    <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">,</span> compareFn<span class="token punctuation">)</span>
    array <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> compareFn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> array
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>\u8FC7\u7A0B\u56FE\u89E3\uFF1A</p><p><img src="`+d+`" alt="mergeSort"></p><h3 id="\u5FEB\u901F\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5FEB\u901F\u6392\u5E8F" aria-hidden="true">#</a> \u5FEB\u901F\u6392\u5E8F</h3><p>\u5FEB\u901F\u6392\u5E8F\u4E5F\u8BB8\u662F\u6700\u5E38\u7528\u7684\u6392\u5E8F\u7B97\u6CD5\u4E86</p><ul><li>\u590D\u6742\u5EA6\u4E3A O(nlog(n))\uFF0C\u4E14\u6027\u80FD\u901A\u5E38\u6BD4\u5176\u4ED6\u590D\u6742\u5EA6\u4E3A O(nlog(n))\u7684\u6392\u5E8F\u7B97\u6CD5\u8981\u597D\u3002</li><li>\u548C\u5F52\u5E76\u6392\u5E8F\u4E00\u6837\uFF0C\u5FEB\u901F\u6392\u5E8F\u4E5F\u4F7F\u7528\u5206\u800C\u6CBB\u4E4B\u7684\u65B9\u6CD5\uFF0C\u5C06\u539F\u59CB\u6570\u7EC4\u5206\u4E3A\u8F83\u5C0F\u7684\u6570\u7EC4</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> Compare <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">LESS_THAN</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BIGGER_THAN</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">defaultCompare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span> <span class="token operator">:</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u4EA4\u6362\u51FD\u6570</span>
<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>a<span class="token punctuation">]</span>
  array<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>b<span class="token punctuation">]</span>
  array<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> compareFn <span class="token operator">=</span> defaultCompare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">quick</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> compareFn<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">quick</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> compareFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index
  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    index <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> compareFn<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">quick</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> compareFn<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">quick</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> index<span class="token punctuation">,</span> right<span class="token punctuation">,</span> compareFn<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> array
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> compareFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pivot <span class="token operator">=</span> array<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> left
  <span class="token keyword">let</span> j <span class="token operator">=</span> right
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">compareFn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pivot<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      i<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">compareFn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> pivot<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      j<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
      i<span class="token operator">++</span>
      j<span class="token operator">--</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> i
<span class="token punctuation">}</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre></div><p>\u8FC7\u7A0B\u56FE\u89E3\uFF1A</p><p><img src="`+m+'" alt="quickSort_1"></p><p><img src="'+y+'" alt="quickSort_2"></p><p><img src="'+f+'" alt="quickSort_3"></p><p><img src="'+b+'" alt="quickSort_4"></p><p><img src="'+h+`" alt="quickSort_5"></p><h3 id="\u8BA1\u6570\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u8BA1\u6570\u6392\u5E8F" aria-hidden="true">#</a> \u8BA1\u6570\u6392\u5E8F</h3><ul><li>\u662F\u4E00\u4E2A\u5206\u5E03\u5F0F\u6392\u5E8F</li><li>\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(n+k)\uFF0C\u5176\u4E2D k \u662F\u4E34\u65F6\u8BA1\u6570\u6570\u7EC4\u7684\u5927\u5C0F\uFF1B</li><li>\u4F46\u662F\uFF0C\u5B83\u786E\u5B9E\u9700\u8981\u66F4\u591A\u7684\u5185\u5B58\u6765\u5B58\u653E\u4E34\u65F6\u6570\u7EC4\u3002</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> array
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> maxValue <span class="token operator">=</span> <span class="token function">findMaxValue</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
  <span class="token keyword">const</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
  array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>counts<span class="token punctuation">[</span>element<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      counts<span class="token punctuation">[</span>element<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    counts<span class="token punctuation">[</span>element<span class="token punctuation">]</span><span class="token operator">++</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> sortedIndex <span class="token operator">=</span> <span class="token number">0</span>
  counts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      array<span class="token punctuation">[</span>sortedIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
      count<span class="token operator">--</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> array
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">findMaxValue</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> max
<span class="token punctuation">}</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">countingSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre></div><p>\u8FC7\u7A0B\u56FE\u89E3\uFF1A</p><p><img src="`+w+'" alt="countingSort"></p><h3 id="\u6876\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u6876\u6392\u5E8F" aria-hidden="true">#</a> \u6876\u6392\u5E8F</h3><p>\u6876\u6392\u5E8F\uFF08\u4E5F\u88AB\u79F0\u4E3A\u7BB1\u6392\u5E8F\uFF09\u4E5F\u662F\u5206\u5E03\u5F0F\u6392\u5E8F\u7B97\u6CD5\uFF0C\u5B83\u5C06\u5143\u7D20\u5206\u4E3A\u4E0D\u540C\u7684\u6876\uFF08\u8F83\u5C0F\u7684\u6570\u7EC4\uFF09\uFF0C \u518D\u4F7F\u7528\u4E00\u4E2A\u7B80\u5355\u7684\u6392\u5E8F\u7B97\u6CD5\uFF0C\u4F8B\u5982\u63D2\u5165\u6392\u5E8F\uFF08\u7528\u6765\u6392\u5E8F\u5C0F\u6570\u7EC4\u7684\u4E0D\u9519\u7684\u7B97\u6CD5\uFF09\uFF0C\u6765\u5BF9\u6BCF\u4E2A\u6876\u8FDB\u884C \u6392\u5E8F\u3002\u7136\u540E\uFF0C\u5B83\u5C06\u6240\u6709\u7684\u6876\u5408\u5E76\u4E3A\u7ED3\u679C\u6570\u7EC4\u3002</p><h3 id="\u57FA\u6570\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u57FA\u6570\u6392\u5E8F" aria-hidden="true">#</a> \u57FA\u6570\u6392\u5E8F</h3><p>\u57FA\u6570\u6392\u5E8F\u4E5F\u662F\u4E00\u4E2A\u5206\u5E03\u5F0F\u6392\u5E8F\u7B97\u6CD5\uFF0C\u5B83\u6839\u636E\u6570\u5B57\u7684\u6709\u6548\u4F4D\u6216\u57FA\u6570\uFF08\u8FD9\u4E5F\u662F\u5B83\u4E3A\u4EC0\u4E48\u53EB\u57FA\u6570\u6392 \u5E8F\uFF09\u5C06\u6574\u6570\u5206\u5E03\u5230\u6876\u4E2D\u3002\u57FA\u6570\u662F\u57FA\u4E8E\u6570\u7EC4\u4E2D\u503C\u7684\u8BB0\u6570\u5236\u7684\u3002</p><h2 id="\u641C\u7D22\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u641C\u7D22\u7B97\u6CD5" aria-hidden="true">#</a> \u641C\u7D22\u7B97\u6CD5</h2><ul><li>\u987A\u5E8F\u641C\u7D22</li><li>\u5185\u63D2\u641C\u7D22</li><li>\u4E8C\u5206\u641C\u7D22\u7B97\u6CD5</li></ul><h3 id="\u987A\u5E8F\u641C\u7D22" tabindex="-1"><a class="header-anchor" href="#\u987A\u5E8F\u641C\u7D22" aria-hidden="true">#</a> \u987A\u5E8F\u641C\u7D22</h3><h3 id="\u4E8C\u5206\u641C\u7D22" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u5206\u641C\u7D22" aria-hidden="true">#</a> \u4E8C\u5206\u641C\u7D22</h3><h3 id="\u5185\u63D2\u641C\u7D22" tabindex="-1"><a class="header-anchor" href="#\u5185\u63D2\u641C\u7D22" aria-hidden="true">#</a> \u5185\u63D2\u641C\u7D22</h3><h2 id="\u968F\u673A\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u968F\u673A\u7B97\u6CD5" aria-hidden="true">#</a> \u968F\u673A\u7B97\u6CD5</h2>',56);function C(E,N){const s=t("ExternalLinkIcon");return o(),e("div",null,[_,S,n("p",null,[n("a",j,[x,c(s)])]),v])}var A=p(g,[["render",C],["__file","sort-and-search.html.vue"]]);export{A as default};
