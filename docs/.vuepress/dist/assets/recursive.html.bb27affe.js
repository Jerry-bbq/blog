import{_ as n,o as a,c as s,e as p}from"./app.b9da9bf7.js";const t={},o=p(`<h1 id="\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52" aria-hidden="true">#</a> \u9012\u5F52</h1><h2 id="\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a> \u5B9A\u4E49</h2><p>\u51FD\u6570\u81EA\u5DF1\u8C03\u7528\u81EA\u5DF1</p><ul><li>\u6BCF\u4E2A\u9012\u5F52\u51FD\u6570\u90FD\u5FC5\u987B\u6709\u57FA\u7EBF\u6761\u4EF6\uFF0C\u5373\u4E00\u4E2A\u4E0D\u518D\u9012\u5F52\u8C03\u7528\u7684\u6761\u4EF6\uFF08 \u505C\u6B62\u70B9\uFF09\uFF0C\u4EE5\u9632\u6B62\u65E0\u9650\u9012\u5F52</li></ul><h2 id="\u8BA1\u7B97\u4E00\u4E2A\u6570\u7684\u9636\u4E58" tabindex="-1"><a class="header-anchor" href="#\u8BA1\u7B97\u4E00\u4E2A\u6570\u7684\u9636\u4E58" aria-hidden="true">#</a> \u8BA1\u7B97\u4E00\u4E2A\u6570\u7684\u9636\u4E58</h2><p>\u6570 n \u7684\u9636\u4E58\uFF0C\u5B9A\u4E49\u4E3A n!\uFF0C\u8868\u793A\u4ECE 1 \u5230 n \u7684\u6574\u6570\u7684\u4E58\u79EF\u3002</p><p>5 \u7684\u9636\u4E58\u8868\u793A\u4E3A 5!\uFF0C\u548C 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 \u76F8\u7B49\uFF0C\u7ED3\u679C\u662F 120</p><h3 id="\u8FED\u4EE3\u9636\u4E58" tabindex="-1"><a class="header-anchor" href="#\u8FED\u4EE3\u9636\u4E58" aria-hidden="true">#</a> \u8FED\u4EE3\u9636\u4E58</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">factorialIterative</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token operator">=</span> number<span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    total <span class="token operator">=</span> total <span class="token operator">*</span> n
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> total
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorialIterative</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 120</span>
</code></pre></div><h3 id="\u9012\u5F52\u9636\u4E58" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52\u9636\u4E58" aria-hidden="true">#</a> \u9012\u5F52\u9636\u4E58</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u57FA\u7EBF\u6761\u4EF6</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// \u9012\u5F52\u8C03\u7528</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 120</span>
</code></pre></div><h2 id="\u6590\u6CE2\u90A3\u5951\u6570\u5217" tabindex="-1"><a class="header-anchor" href="#\u6590\u6CE2\u90A3\u5951\u6570\u5217" aria-hidden="true">#</a> \u6590\u6CE2\u90A3\u5951\u6570\u5217</h2><p>\u7531 0\u3001 1\u3001 1\u3001 2\u3001 3\u3001 5\u3001 8\u3001 13\u3001 21\u300134 \u7B49\u6570\u7EC4\u6210\u7684\u5E8F\u5217\u3002\u6570 2 \u7531 1 + 1 \u5F97\u5230\uFF0C\u6570 3 \u7531 1 + 2 \u5F97\u5230\uFF0C\u6570 5 \u7531 2 + 3 \u5F97\u5230\uFF0C\u4EE5\u6B64\u7C7B\u63A8</p><p>\u6590\u6CE2\u90A3\u5951\u6570\u5217\u7684\u5B9A\u4E49\u5982\u4E0B\uFF1A</p><ul><li>\u4F4D\u7F6E 0 \u7684\u6590\u6CE2\u90A3\u5951\u6570\u662F\u96F6\u3002</li><li>1 \u548C 2 \u7684\u6590\u6CE2\u90A3\u5951\u6570\u662F 1\u3002</li><li>n\uFF08\u6B64\u5904 n &gt; 2\uFF09\u7684\u6590\u6CE2\u90A3\u5951\u6570\u662F\uFF08 n \uF02D 1\uFF09\u7684\u6590\u6CE2\u90A3\u5951\u6570\u52A0\u4E0A\uFF08 n \uF02D 2\uFF09\u7684\u6590\u6CE2\u90A3\u5951\u6570\u3002</li></ul><h3 id="\u8FED\u4EE3\u6C42\u6590\u6CE2\u90A3\u5951\u6570" tabindex="-1"><a class="header-anchor" href="#\u8FED\u4EE3\u6C42\u6590\u6CE2\u90A3\u5951\u6570" aria-hidden="true">#</a> \u8FED\u4EE3\u6C42\u6590\u6CE2\u90A3\u5951\u6570</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fibonacciIterative</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token keyword">let</span> fibNMinus2 <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> fibNMinus1 <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">let</span> fibN <span class="token operator">=</span> n
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// n &gt;= 2</span>
    fibN <span class="token operator">=</span> fibNMinus1 <span class="token operator">+</span> fibNMinus2 <span class="token comment">// f(n-1) + f(n-2)</span>
    fibNMinus2 <span class="token operator">=</span> fibNMinus1
    fibNMinus1 <span class="token operator">=</span> fibN
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> fibN
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u9012\u5F52\u6C42\u6590\u6CE2\u90A3\u5951\u6570" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52\u6C42\u6590\u6CE2\u90A3\u5951\u6570" aria-hidden="true">#</a> \u9012\u5F52\u6C42\u6590\u6CE2\u90A3\u5951\u6570</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u8BB0\u5FC6\u5316\u6590\u6CE2\u90A3\u5951\u6570" tabindex="-1"><a class="header-anchor" href="#\u8BB0\u5FC6\u5316\u6590\u6CE2\u90A3\u5951\u6570" aria-hidden="true">#</a> \u8BB0\u5FC6\u5316\u6590\u6CE2\u90A3\u5951\u6570</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fibonacciMemoization</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> memo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> <span class="token function-variable function">fibonacci</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> memo<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> memo<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> fibonacci
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FED\u4EE3\u7684\u7248\u672C\u6BD4\u9012\u5F52\u7684\u7248\u672C\u5FEB\u5F88\u591A\uFF0C\u6240\u4EE5\u8FD9\u8868\u793A\u9012\u5F52\u66F4\u6162\u3002</p>`,22),e=[o];function c(l,r){return a(),s("div",null,e)}var k=n(t,[["render",c],["__file","recursive.html.vue"]]);export{k as default};
