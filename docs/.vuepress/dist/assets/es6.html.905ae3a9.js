import{_ as o,r as e,o as c,c as l,b as n,d as t,e as s,a as p}from"./app.01bb55c3.js";var u="/blog/assets/promise-constructor.45498d90.png";const k={},i=n("h1",{id:"es6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#es6","aria-hidden":"true"},"#"),s(" es6")],-1),r={href:"https://www.w3cschool.cn/escript6/escript6-pm6z37es.html",target:"_blank",rel:"noopener noreferrer"},d=s("w3c"),m=p(`<h2 id="le\u4E0Econst" tabindex="-1"><a class="header-anchor" href="#le\u4E0Econst" aria-hidden="true">#</a> le\u4E0Econst</h2><p><code>let</code>\u58F0\u660E\u7684\u53D8\u91CF\u53EA\u5728\u5B83\u6240\u5728\u7684<code>\u4EE3\u7801\u5757</code>\u6709\u6548</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
a <span class="token comment">// ReferenceError: a is not defined.</span>
b <span class="token comment">// 1</span>
</code></pre></div><h2 id="\u89E3\u6784\u8D4B\u503C" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6784\u8D4B\u503C" aria-hidden="true">#</a> \u89E3\u6784\u8D4B\u503C</h2><h2 id="\u5B57\u7B26\u4E32\u7684\u6269\u5C55" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u7684\u6269\u5C55" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u7684\u6269\u5C55</h2><h2 id="\u5B57\u7B26\u4E32\u7684\u65B0\u589E\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u7684\u65B0\u589E\u65B9\u6CD5" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u7684\u65B0\u589E\u65B9\u6CD5</h2><h2 id="\u7BAD\u5934\u51FD\u6570\u4E0E\u666E\u901A\u51FD\u6570\u7684\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#\u7BAD\u5934\u51FD\u6570\u4E0E\u666E\u901A\u51FD\u6570\u7684\u533A\u522B" aria-hidden="true">#</a> \u7BAD\u5934\u51FD\u6570\u4E0E\u666E\u901A\u51FD\u6570\u7684\u533A\u522B</h2><ol><li>\u7BAD\u5934\u51FD\u6570\u8BED\u6CD5\u4E0A\u66F4\u7B80\u6D01</li><li>\u7BAD\u5934\u51FD\u6570\u662F\u533F\u540D\u51FD\u6570\uFF0C\u4E0D\u80FD\u4F5C\u4E3A\u6784\u9020\u51FD\u6570\uFF0C\u4E0D\u80FD\u4F7F\u7528<code>new</code>\u64CD\u4F5C\u7B26</li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">arrowFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">commonFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> newFn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">arrowFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught TypeError: fn is not a constructor</span>
<span class="token keyword">let</span> newCommonFn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">commonFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// commonFn {}</span>
</code></pre></div><ol start="3"><li>\u7BAD\u5934\u51FD\u6570\u6CA1\u6709\u539F\u578B\u5BF9\u8C61<code>prototype</code></li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">arrowFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">commonFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrowFn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>commonFn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// {constructor: \u0192}</span>
</code></pre></div><ol start="4"><li>\u7BAD\u5934\u51FD\u6570\u6CA1<code>this</code>\uFF0C\u5B83\u91CC\u9762\u7684<code>this</code><strong>\u7EE7\u627F\u51FD\u6570\u6240\u5904\u7684\u4E0A\u4E0B\u6587\u4E2D\u7684this</strong>\uFF08\u901A\u8FC7\u67E5\u627E\u4F5C\u7528\u57DF\u94FE\u6765\u786E\u5B9A<code>this</code>\u7684\u503C\uFF09\uFF0C\u4F7F\u7528call/apply/bind \u65E0\u6CD5\u6539\u53D8\u7BAD\u5934\u51FD\u6570\u7684this\u6307\u5411</li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">printName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6307\u5411window\u5BF9\u8C61</span>
        <span class="token comment">// \u4F7F\u7528call\u65E0\u6CD5\u6539\u53D8this\u6307\u5411\uFF0C\u4ECD\u7136\u6307\u5411window\u5BF9\u8C61</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;printName&#39;</span><span class="token punctuation">)</span> 
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuName<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">printName2</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6307\u5411\u5F53\u524D\u5BF9\u8C61obj</span>
        <span class="token comment">// \u4F7F\u7528call\u53EF\u4EE5\u6539\u53D8this\u6307\u5411\u5BF9\u8C61 {stuName: &#39;luck&#39;}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;printName2&#39;</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuName<span class="token punctuation">)</span> <span class="token comment">// jack</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">printName3</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;printName3&#39;</span><span class="token punctuation">)</span> <span class="token comment">// \u4F5C\u7528\u57DF\u94FE\u67E5\u627E \u6307\u5411\u5F53\u524D\u5BF9\u8C61obj</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span><span class="token function">printName2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span><span class="token function">printName3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span><span class="token function">printName2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&#39;luck&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&#39;luck&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><ol start="5"><li>\u7BAD\u5934\u51FD\u6570\u4E2D\u6CA1\u6709<code>arguments</code>\uFF08\u7C7B\u6570\u7EC4\uFF09\uFF0C\u53D6\u800C\u4EE3\u4E4B\u4F7F\u7528<code>rest</code>\u53C2\u6570\u89E3\u51B3</li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">arrowFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">commonFn</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token function">arrowFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: arguments is not defined</span>
<span class="token function">commonFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// Arguments(3) [1, 2, 3, callee: \u0192, Symbol(Symbol.iterator): \u0192]</span>

<span class="token comment">// \u89E3\u51B3</span>
<span class="token keyword">let</span> <span class="token function-variable function">arrowFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token function">arrowFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3]</span>
</code></pre></div><h2 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h2><ol><li>\u4EC0\u4E48\u662FSymbol</li></ol><ul><li>ES6 \u5F15\u5165\u7684\u4E00\u79CD\u65B0\u7684\u539F\u59CB\u6570\u636E\u7C7B\u578BSymbol\uFF0C\u8868\u793A\u72EC\u4E00\u65E0\u4E8C\u7684\u503C</li><li>\u901A\u8FC7<code>Symbol()</code>\u51FD\u6570\u751F\u6210\u5B9E\u4F8B\uFF0C\u4E0D\u80FD\u4F7F\u7528new\u521B\u5EFA</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \u521B\u5EFASymbol\u5B9E\u4F8B\uFF0C\u4E0D\u53EF\u4EE5\u4F7F\u7528new\u6765\u521B\u5EFA</span>

<span class="token keyword">let</span> sym1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> sym2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">typeof</span> sym <span class="token comment">// symbol</span>
sym1 <span class="token operator">===</span> sym2 <span class="token comment">// false</span>
</code></pre></div><ol start="2"><li>\u5B83\u7684\u4F7F\u7528\u573A\u666F\u662F\u4EC0\u4E48</li></ol><ul><li>\u4F5C\u4E3A\u5BF9\u8C61\u7684\u5C5E\u6027\u540D</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> symObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;\u5C0F\u738B&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Age <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ClassName <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
symObj<span class="token punctuation">[</span>Age<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span>
symObj<span class="token punctuation">[</span>ClassName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;\u4E00\u5E74\u7EA7&#39;</span>

symObj<span class="token punctuation">[</span>Age<span class="token punctuation">]</span> <span class="token comment">// 12</span>
symObj<span class="token punctuation">[</span>ClassName<span class="token punctuation">]</span> <span class="token comment">// &quot;\u4E00\u5E74\u7EA7&quot;</span>
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>\u4F7F\u7528<code>for...in</code>, <code>Object.keys()</code>\u679A\u4E3E\u5BF9\u8C61\u65F6\uFF0C\u662F\u83B7\u53D6\u4E0D\u5230Symbol\u7C7B\u578B\u7684key\u7684</li><li>\u4F7F\u7528<code>JSON.stringify()</code>\u5C06\u5BF9\u8C61\u8F6C\u6362\u6210JSON\u5B57\u7B26\u4E32\u4E5F\u662F\u4F1A\u5FFD\u7565Symbol\u5C5E\u6027\u7684</li><li>\u83B7\u53D6\u4EE5Symbol\u65B9\u5F0F\u5B9A\u4E49\u7684\u5BF9\u8C61\u5C5E\u6027\uFF1A<code>Object.getOwnPropertySymbols(obj)</code>\u6216\u8005<code>Reflect.ownKeys(obj)</code></li></ol></div><ul><li>\u4EE3\u66FF\u5E38\u91CF</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">COURSE_TYPE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">SKU_TYPE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">LIVE_TYPE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><ul><li>\u5B9A\u4E49\u79C1\u6709\u5C5E\u6027/\u65B9\u6CD5</li></ul><p>a.js</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username
    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">PASSWORD</span><span class="token punctuation">]</span> <span class="token operator">=</span> password
  <span class="token punctuation">}</span>

  <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token parameter">pwd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">PASSWORD</span><span class="token punctuation">]</span> <span class="token operator">===</span> pwd
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Login
</code></pre></div><p>b.js</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>

<span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Login</span><span class="token punctuation">(</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span>

login<span class="token punctuation">.</span><span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>

login<span class="token punctuation">.</span><span class="token constant">PASSWORD</span>  <span class="token comment">// oh!no!</span>
login<span class="token punctuation">[</span><span class="token constant">PASSWORD</span><span class="token punctuation">]</span> <span class="token comment">// oh!no!</span>
login<span class="token punctuation">[</span><span class="token string">&quot;PASSWORD&quot;</span><span class="token punctuation">]</span> <span class="token comment">// oh!no</span>
</code></pre></div><ul><li>\u6CE8\u518C\u548C\u83B7\u53D6\u5168\u5C40Symbol</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> gs1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;global_symbol_1&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//\u6CE8\u518C\u4E00\u4E2A\u5168\u5C40Symbol</span>
<span class="token keyword">let</span> gs2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;global_symbol_1&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//\u83B7\u53D6\u5168\u5C40Symbol</span>

gs1 <span class="token operator">===</span> gs2  <span class="token comment">// true</span>
</code></pre></div><h2 id="map\u548Cweakmap\u7684\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#map\u548Cweakmap\u7684\u533A\u522B" aria-hidden="true">#</a> Map\u548CWeakmap\u7684\u533A\u522B</h2><ol><li>Map</li></ol><p>\u5B57\u7B26\u4E32\u4F5C\u4E3Akey\uFF0C \u548CJS\u5BF9\u8C61\u7C7B\u4F3C</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// set</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span>
<span class="token comment">// get</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span> <span class="token comment">// John</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 29</span>
</code></pre></div><p>key\u53EF\u4EE5\u662F\u4EFB\u610F\u7C7B\u578B</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// \u5BF9\u8C61\u4F5C\u4E3Akey\u6F14\u793A</span>
<span class="token keyword">var</span> xy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span>   <span class="token comment">// \u5750\u6807</span>
<span class="token keyword">var</span> wh <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">w</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">h</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span> <span class="token comment">// \u5BBD\u9AD8</span>
<span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// set</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>xy<span class="token punctuation">,</span> <span class="token string">&#39;\u5750\u6807&#39;</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>wh<span class="token punctuation">,</span> <span class="token string">&#39;\u5BBD\u9AD8&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// get</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>xy<span class="token punctuation">)</span> <span class="token comment">// &#39;\u5750\u6807&#39;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>wh<span class="token punctuation">)</span> <span class="token comment">// &#39;\u5BBD\u9AD8&#39;</span>
</code></pre></div><p>\u4F20\u6570\u7EC4\u65B9\u5F0F</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;29&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
 
<span class="token comment">// \u904D\u5386key</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// name, age</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FED\u4EE3\u5668</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// set</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span>
<span class="token comment">// get</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;John&#39;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 29</span>

<span class="token comment">// \u904D\u5386key</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// \u904D\u5386value</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> val <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// \u904D\u5386\u5B9E\u4F53</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> arr <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;key: &#39;</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;, value: &#39;</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// \u904D\u5386\u5B9E\u4F53\u7684\u7B80\u5199</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;key: &#39;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&#39;, value: &#39;</span> <span class="token operator">+</span> val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u65B9\u6CD5\u548C\u5C5E\u6027\uFF1A</p><ul><li>clear</li><li>delete</li><li>entries</li><li>forEach</li><li>get</li><li>set</li><li>has</li><li>keys</li><li>size</li><li>values</li></ul><ol start="2"><li>WeakMap</li></ol><p>\u4E0EMap\u7684\u533A\u522B</p><ul><li>\u4E0D\u63A5\u53D7\u57FA\u672C\u7C7B\u578B\u7684\u503C\u4F5C\u4E3A\u952E\u540D</li><li>\u6CA1\u6709keys\u3001values\u3001entries\u548Csize</li></ul><p>\u5C5E\u6027\u548C\u65B9\u6CD5\uFF1A</p><ul><li>clear</li><li>delete</li><li>get</li><li>set</li><li>has</li></ul><h2 id="set\u548Cmap\u7684\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#set\u548Cmap\u7684\u533A\u522B" aria-hidden="true">#</a> Set\u548CMap\u7684\u533A\u522B</h2><p>Set \u662F\u4E00\u79CD\u53EB\u505A\u96C6\u5408\u7684\u6570\u636E\u7ED3\u6784\uFF0CMap \u662F\u4E00\u79CD\u53EB\u505A\u5B57\u5178\u7684\u6570\u636E\u7ED3\u6784\u3002</p><p>\u96C6\u5408 \u4E0E \u5B57\u5178 \u7684\u533A\u522B\uFF1A</p><ul><li>\u5171\u540C\u70B9\uFF1A\u96C6\u5408\u3001\u5B57\u5178 \u53EF\u4EE5\u50A8\u5B58\u4E0D\u91CD\u590D\u7684\u503C</li><li>\u4E0D\u540C\u70B9\uFF1A\u96C6\u5408 \u662F\u4EE5 [value, value]\u7684\u5F62\u5F0F\u50A8\u5B58\u5143\u7D20\uFF0C\u5B57\u5178 \u662F\u4EE5 [key, value] \u7684\u5F62\u5F0F\u50A8\u5B58</li></ul><p>ES6 \u65B0\u589E\u7684\u4E00\u79CD\u65B0\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u7C7B\u4F3C\u4E8E\u6570\u7EC4\uFF0C\u6210\u5458\u552F\u4E00\uFF08\u5185\u90E8\u5143\u7D20\u6CA1\u6709\u91CD\u590D\u7684\u503C\uFF09\u3002\u4E14\u4F7F\u7528\u952E\u5BF9\u6570\u636E\u6392\u5E8F\u5373\u987A\u5E8F\u5B58\u50A8\uFF08\u7ECF\u8BC4\u8BBA\u533A\u5927\u4F6C\u63D0\u9192\uFF09\u3002</p><p>Set \u672C\u8EAB\u662F\u4E00\u79CD\u6784\u9020\u51FD\u6570\uFF0C\u7528\u6765\u751F\u6210 Set \u6570\u636E\u7ED3\u6784\u3002</p><p>Set \u5BF9\u8C61\u5141\u8BB8\u4F60\u50A8\u5B58\u4EFB\u4F55\u7C7B\u578B\u7684\u552F\u4E00\u503C\uFF0C\u65E0\u8BBA\u662F\u539F\u59CB\u503C\u6216\u8005\u662F\u5BF9\u8C61\u5F15\u7528\u3002</p><p>\u64CD\u4F5C\u65B9\u6CD5\uFF1A</p><ul><li>add(value)\uFF1A\u65B0\u589E\uFF0C\u76F8\u5F53\u4E8E array\u91CC\u7684push\u3002</li><li>delete(value)\uFF1A\u5B58\u5728\u5373\u5220\u9664\u96C6\u5408\u4E2Dvalue\u3002</li><li>has(value)\uFF1A\u5224\u65AD\u96C6\u5408\u4E2D\u662F\u5426\u5B58\u5728 value\u3002</li><li>clear()\uFF1A\u6E05\u7A7A\u96C6\u5408\u3002</li></ul><p>\u4FBF\u5229\u65B9\u6CD5\uFF1A\u904D\u5386\u65B9\u6CD5\uFF08\u904D\u5386\u987A\u5E8F\u4E3A\u63D2\u5165\u987A\u5E8F\uFF09</p><ul><li>keys()\uFF1A\u8FD4\u56DE\u4E00\u4E2A\u5305\u542B\u96C6\u5408\u4E2D\u6240\u6709\u952E\u7684\u8FED\u4EE3\u5668\u3002</li><li>values()\uFF1A\u8FD4\u56DE\u4E00\u4E2A\u5305\u542B\u96C6\u5408\u4E2D\u6240\u6709\u503C\u5F97\u8FED\u4EE3\u5668\u3002</li><li>entries()\uFF1A\u8FD4\u56DE\u4E00\u4E2A\u5305\u542BSet\u5BF9\u8C61\u4E2D\u6240\u6709\u5143\u7D20\u5F97\u952E\u503C\u5BF9\u8FED\u4EE3\u5668\u3002</li><li>forEach(callbackFn, thisArg)\uFF1A\u7528\u4E8E\u5BF9\u96C6\u5408\u6210\u5458\u6267\u884CcallbackFn\u64CD\u4F5C\uFF0C\u5982\u679C\u63D0\u4F9B\u4E86 thisArg \u53C2\u6570\uFF0C\u56DE\u8C03\u4E2D\u7684this\u4F1A\u662F\u8FD9\u4E2A\u53C2\u6570\uFF0C\u6CA1\u6709\u8FD4\u56DE\u503C\u3002</li></ul><h2 id="weakset\u4E0Eset\u7684\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#weakset\u4E0Eset\u7684\u533A\u522B" aria-hidden="true">#</a> WeakSet\u4E0ESet\u7684\u533A\u522B</h2><p>WeakSet \u5BF9\u8C61\u5141\u8BB8\u4F60\u5C06\u5F31\u5F15\u7528\u5BF9\u8C61\u50A8\u5B58\u5728\u4E00\u4E2A\u96C6\u5408\u4E2D\u3002</p><p>WeakSet \u4E0E Set \u7684\u533A\u522B\uFF1A</p><ul><li>WeakSet \u53EA\u80FD\u50A8\u5B58\u5BF9\u8C61\u5F15\u7528\uFF0C\u4E0D\u80FD\u5B58\u653E\u503C\uFF0C\u800C Set \u5BF9\u8C61\u90FD\u53EF\u4EE5\u3002</li><li>WeakSet \u5BF9\u8C61\u4E2D\u50A8\u5B58\u7684\u5BF9\u8C61\u503C\u90FD\u662F\u88AB\u5F31\u5F15\u7528\u7684\uFF0C\u5373\u5783\u573E\u56DE\u6536\u673A\u5236\u4E0D\u8003\u8651 WeakSet \u5BF9\u8BE5\u5BF9\u8C61\u7684\u5E94\u7528\uFF0C\u5982\u679C\u6CA1\u6709\u5176\u4ED6\u7684\u53D8\u91CF\u6216\u5C5E\u6027\u5F15\u7528\u8FD9\u4E2A\u5BF9\u8C61\u503C\uFF0C\u5219\u8FD9\u4E2A\u5BF9\u8C61\u5C06\u4F1A\u88AB\u5783\u573E\u56DE\u6536\u6389\uFF08\u4E0D\u8003\u8651\u8BE5\u5BF9\u8C61\u8FD8\u5B58\u5728\u4E8E WeakSet \u4E2D\uFF09\uFF0C\u6240\u4EE5\uFF0CWeakSet \u5BF9\u8C61\u91CC\u6709\u591A\u5C11\u4E2A\u6210\u5458\u5143\u7D20\uFF0C\u53D6\u51B3\u4E8E\u5783\u573E\u56DE\u6536\u673A\u5236\u6709\u6CA1\u6709\u8FD0\u884C\uFF0C\u8FD0\u884C\u524D\u540E\u6210\u5458\u4E2A\u6570\u53EF\u80FD\u4E0D\u4E00\u81F4\uFF0C\u904D\u5386\u7ED3\u675F\u4E4B\u540E\uFF0C\u6709\u7684\u6210\u5458\u53EF\u80FD\u53D6\u4E0D\u5230\u4E86\uFF08\u88AB\u5783\u573E\u56DE\u6536\u4E86\uFF09\uFF0CWeakSet \u5BF9\u8C61\u662F\u65E0\u6CD5\u88AB\u904D\u5386\u7684\uFF08ES6 \u89C4\u5B9A WeakSet \u4E0D\u53EF\u904D\u5386\uFF09\uFF0C\u4E5F\u6CA1\u6709\u529E\u6CD5\u62FF\u5230\u5B83\u5305\u542B\u7684\u6240\u6709\u5143\u7D20\u3002</li></ul><p>\u65B9\u6CD5\uFF1A</p><ul><li>add(value)\uFF1A\u5728WeakSet \u5BF9\u8C61\u4E2D\u6DFB\u52A0\u4E00\u4E2A\u5143\u7D20value\u3002</li><li>has(value)\uFF1A\u5224\u65AD WeakSet \u5BF9\u8C61\u4E2D\u662F\u5426\u5305\u542Bvalue\u3002</li><li>delete(value)\uFF1A\u5220\u9664\u5143\u7D20 value</li></ul><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h2><p><img src="`+u+`" alt=""></p><ol><li><p><code>Promise</code>\u662F\u4E00\u4E2A\u6784\u9020\u51FD\u6570\uFF0C\u5B83\u7684\u9759\u6001\u65B9\u6CD5\u6709\uFF1A<code>all</code>,<code>allSettled</code>,<code>any</code>,<code>race</code>,<code>reject</code>,<code>resolve</code>\uFF0C\u5B9E\u4F8B\u65B9\u6CD5\u6709\uFF1A<code>catch</code>,<code>finally</code>,<code>then</code></p></li><li><p><code>Promise</code>\u6709\u4E09\u79CD\u72B6\u6001\uFF0C\u5206\u522B\u662F<code>pending</code>\uFF08\u521D\u59CB\u5316\uFF09\u3001<code>fulfilled</code>\uFF08\u5B8C\u6210\uFF09\u3001<code>rejected</code>\uFF08\u5931\u8D25\uFF09\uFF1B\u72B6\u6001\u53EA\u80FD\u7531<code>pending -&gt; fulfilled</code>\uFF0C <code>pending -&gt; rejected</code>\uFF0C\u4E14<strong>\u4E0D\u53EF\u9006</strong>\u3002</p></li><li><p>\u5F53\u5B9E\u4F8B\u5316\u4E00\u4E2A<code>Promise</code>\u65F6\uFF0C\u9700\u8981\u4F20\u5165\u4E00\u4E2A\u6267\u884C\u51FD\u6570<code>executor</code>\uFF0C\u8BE5\u51FD\u6570\u6709\u4E24\u4E2A\u51FD\u6570\u53C2\u6570<code>resolve</code>,<code>reject</code>\uFF0C\u5E76\u4E14\u6267\u884C\u8BE5\u51FD\u6570\u6267\u884C\u51FD\u6570</p></li></ol><h3 id="\u57FA\u7840\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u57FA\u7840\u7ED3\u6784" aria-hidden="true">#</a> \u57FA\u7840\u7ED3\u6784</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;PENDING&#39;</span>
<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">&#39;FULFILLED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;REJECTED&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>
    <span class="token keyword">let</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u5B9E\u4F8B\u65B9\u6CD5</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// \u9759\u6001\u65B9\u6CD5</span>
  <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u521D\u59CB\u5316\u5E76\u6267\u884C\u4F20\u5165\u7684\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316\u5E76\u6267\u884C\u4F20\u5165\u7684\u51FD\u6570" aria-hidden="true">#</a> \u521D\u59CB\u5316\u5E76\u6267\u884C\u4F20\u5165\u7684\u51FD\u6570</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u6267\u884C\u51FD\u6570&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;this is a Error&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u68C0\u6D4B\u5230throw\u629B\u51FA\u7684\u9519\u8BEF</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><ul><li>\u521D\u59CB\u5316\u65F6\uFF0C<code>Promise</code>\u72B6\u6001<code>status</code>\u4E3A<code>pending</code>\uFF0C\u6210\u529F\u7684\u503C<code>value</code>\u548C\u5931\u8D25\u7684\u539F\u56E0<code>reason</code>\u4E3A<code>undefined</code></li><li>\u6267\u884C\u51FD\u6570\u7684\u4E24\u4E2A<strong>\u53C2\u6570\u51FD\u6570</strong><code>resolve</code>\u548C<code>reject</code>\uFF0C\u7528\u4E8E\u6539\u53D8<code>status</code>\u72B6\u6001</li><li>\u6267\u884C\u51FD\u6570<code>executor</code>\u6267\u884C\u65F6\uFF0C\u56E0\u4E3A<code>Promise</code>\u53EF\u4EE5\u6355\u83B7\u5230<code>throw new Error()</code>\u629B\u51FA\u7684\u9519\u8BEF\uFF0C\u6240\u4EE5\u5916\u9762\u9700\u8981\u5305\u4E00\u5C42<code>try...catch</code></li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;PENDING&#39;</span>
<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">&#39;FULFILLED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;REJECTED&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">let</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">FULFILLED</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="then" tabindex="-1"><a class="header-anchor" href="#then" aria-hidden="true">#</a> then</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u6267\u884C\u51FD\u6570&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// resolve(1) // \u6267\u884C\u65F6\u8FDB onFulfilled</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// \u6267\u884C\u65F6\u8FDB onRejected\uFF0C\u5982\u679C\u4E0D\u5199\u63A7\u5236\u53F0\u4F1A\u62A5\u672A\u6355\u83B7\u7684\u9519\u8BEF</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&#39;onFulfilled&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">,</span> <span class="token string">&#39;onRejected&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment">// \u94FE\u5F0F\u8C03\u7528</span>
<span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;\u5931\u8D25&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;err&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
</code></pre></div><ul><li>\u6267\u884C\u51FD\u6570\u7684\u51FD\u6570\u4F53\u4E2D\u5982\u679C\u4E0D\u6267\u884C<code>resolve</code>\u6216<code>reject</code>\u7684\u8BDD\uFF0C\u662F\u4E0D\u4F1A\u6267\u884C<code>then</code>\u7684</li><li><code>then</code>\u63A5\u6536\u4E24\u4E2A\u53EF\u9009\u7684\u51FD\u6570\u53C2\u6570<code>onFulfilled</code>\uFF0C <code>onRejected</code>\uFF0C\u4F5C\u4E3A\u6210\u529F\u548C\u5931\u8D25\u7684\u56DE\u8C03\u51FD\u6570 <ul><li>\u5F53\u72B6\u6001<code>status</code>\u4ECE<code>pending</code>\u53D8\u4E3A<code>fulfilled</code>\u7684\u65F6\uFF0C\u6267\u884C<code>onFulfilled</code>\uFF1B\u5F53<code>status</code>\u4ECE<code>pending</code>\u53D8\u4E3A<code>rejected</code>\u65F6\uFF0C\u6267\u884C<code>onRejected</code></li><li>\u5982\u679C<code>onFulfilled</code>\u662F\u51FD\u6570\uFF0C\u5B83\u6709\u4E00\u4E2A\u53C2\u6570\uFF0C\u63A5\u53D7\u6700\u7EC8\u7684\u7ED3\u679C<code>value</code>\uFF1B\u5426\u5219\u5728\u5185\u90E8\u4F1A\u66FF\u6362\u4E3A<code>(x) =&gt; x</code></li><li>\u5982\u679C<code>onRejected</code>\u662F\u51FD\u6570\uFF0C\u5B83\u6709\u4E00\u4E2A\u53C2\u6570\uFF0C\u4E3A\u5931\u8D25\u7684\u539F\u56E0<code>reason</code>\uFF1B\u5426\u5219\u5728\u5185\u90E8\u4F1A\u66FF\u6362\u4E3A<code>err =&gt; throw new Error(err)</code></li></ul></li><li><code>then</code>\u662F\u5F02\u6B65\u7684\uFF0C\u5C06\u6210\u529F\u56DE\u8C03\u5B58\u50A8\u5F97\u5230<code>onFulfilledCallbacks</code>\u6570\u7EC4\u4E2D,\u5C06\u5931\u8D25\u56DE\u8C03\u5B58\u50A8\u5230<code>onRejectedCallbacks</code>\u6570\u7EC4\u4E2D\uFF08\u53D1\u5E03\u8BA2\u9605\u6A21\u5F0F\uFF09</li><li><code>then</code>\u8FD4\u56DE\u4E00\u4E2A<code>Promise</code>\u5B9E\u4F8B</li><li>\u94FE\u5F0F\u8C03\u7528</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">resolvePromise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>promise <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> called
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
          x<span class="token punctuation">,</span>
          <span class="token parameter">y</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span>
            <span class="token punctuation">}</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span>
            <span class="token punctuation">}</span>
            called <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      called <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">onFulfilled</span> <span class="token operator">:</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val
    onRejected <span class="token operator">=</span>
      <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
        <span class="token operator">?</span> <span class="token function-variable function">onRejected</span>
        <span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>

    <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> promise
<span class="token punctuation">}</span>
</code></pre></div><h3 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve" aria-hidden="true">#</a> resolve</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="reject" tabindex="-1"><a class="header-anchor" href="#reject" aria-hidden="true">#</a> reject</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="all" tabindex="-1"><a class="header-anchor" href="#all" aria-hidden="true">#</a> all</h3><ul><li>\u63A5\u6536\u4E00\u4E2APromise\u7684iterable\u7C7B\u578B\uFF08Array,Map,Set\uFF09\uFF0C\u6BCF\u4E2A\u5143\u7D20\u90FD\u662Fpromise\u5BF9\u8C61</li><li>\u53EA\u6709\u6240\u6709\u7684promise \u90FD fulfilled\uFF0C\u624D\u4F1A\u6267\u884Cthen\uFF0C\u5E76\u4E14\u7ED3\u679C\u987A\u5E8F\u548Citerable\u7C7B\u578B\u6570\u636E\u4E00\u81F4\uFF1B\u5982\u679C\u6709\u4E00\u4E2A\u53D1\u751Freject\uFF0C\u5219\u8FD4\u56DE\u8FD9\u4E2A\u503C</li><li>\u8FD4\u56DE\u4E00\u4E2A<strong>Promise\u5B9E\u4F8B</strong></li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> values
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">TypeError: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>values<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not iterable</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token keyword">const</span> <span class="token function-variable function">processResultByKey</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> val
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>count <span class="token operator">===</span> values<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> value <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">processResultByKey</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">processResultByKey</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="race" tabindex="-1"><a class="header-anchor" href="#race" aria-hidden="true">#</a> race</h3><ul><li>\u8C01\u5148\u5B8C\u6210\u7528\u8C01</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> val <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          val<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="catch" tabindex="-1"><a class="header-anchor" href="#catch" aria-hidden="true">#</a> catch</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">catch</span><span class="token punctuation">(</span>errCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> errCallback<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="finally" tabindex="-1"><a class="header-anchor" href="#finally" aria-hidden="true">#</a> finally</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">finally</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
      <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> reason
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="allsettled" tabindex="-1"><a class="header-anchor" href="#allsettled" aria-hidden="true">#</a> allSettled</h3><h3 id="any" tabindex="-1"><a class="header-anchor" href="#any" aria-hidden="true">#</a> any</h3>`,95),y={href:"https://zhuanlan.zhihu.com/p/183801144",target:"_blank",rel:"noopener noreferrer"},f=s("\u53C2\u8003"),h=p('<h2 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> Proxy</h2><h2 id="relect" tabindex="-1"><a class="header-anchor" href="#relect" aria-hidden="true">#</a> Relect</h2><h2 id="iterator-\u4E0E-for-of-\u5FAA\u73AF" tabindex="-1"><a class="header-anchor" href="#iterator-\u4E0E-for-of-\u5FAA\u73AF" aria-hidden="true">#</a> Iterator \u4E0E for...of \u5FAA\u73AF</h2><h2 id="generator\u51FD\u6570\u7684\u8BED\u6CD5" tabindex="-1"><a class="header-anchor" href="#generator\u51FD\u6570\u7684\u8BED\u6CD5" aria-hidden="true">#</a> Generator\u51FD\u6570\u7684\u8BED\u6CD5</h2><h2 id="async-\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#async-\u51FD\u6570" aria-hidden="true">#</a> async \u51FD\u6570</h2><h2 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h2><h2 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> Module</h2>',7);function g(w,v){const a=e("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[n("a",r,[d,t(a)])]),m,n("p",null,[n("a",y,[f,t(a)])]),h])}var b=o(k,[["render",g],["__file","es6.html.vue"]]);export{b as default};
