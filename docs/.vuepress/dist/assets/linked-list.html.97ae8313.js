import{_ as n,o as s,c as a,a as e}from"./app.ec8717cf.js";var t="/blog/assets/linked-list.3d7f88bb.png",p="/blog/assets/linked-list-show.dde63754.png",o="/blog/assets/null-push.9f3a6dac.png",c="/blog/assets/not-null-push.ea56fa63.png",l="/blog/assets/remove-first.058f0d1b.png",i="/blog/assets/remove-any.7b421867.png",u="/blog/assets/insert-first.9888119a.png",r="/blog/assets/insert-last.853b7e74.png",d="/blog/assets/insert-any.6b5bd293.png";const k={},v=e('<h1 id="\u94FE\u8868\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u94FE\u8868\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> \u94FE\u8868\u6570\u636E\u7ED3\u6784</h1><ul><li>\u6570\u636E\u5448\u7EBF\u6027\u6392\u5217\u7684\u6570\u636E\u7ED3\u6784</li><li>\u6570\u636E\u7684\u6DFB\u52A0\u548C\u5220\u9664\u90FD\u8F83\u4E3A\u65B9\u4FBF\uFF0C\u5C31\u662F\u8BBF\u95EE\u6BD4\u8F83\u8017\u8D39\u65F6\u95F4</li></ul><h2 id="\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a> \u5B9A\u4E49</h2><div class="custom-container danger"><p class="custom-container-title">\u6570\u7EC4\u7684\u7F3A\u70B9</p><p>\u6570\u7EC4\u7684\u5927\u5C0F\u662F\u56FA\u5B9A\u7684\uFF0C\u4ECE\u6570\u7EC4\u7684\u8D77\u70B9\u6216\u4E2D\u95F4\u63D2\u5165\u6216\u79FB \u9664\u9879\u7684\u6210\u672C\u5F88\u9AD8\uFF0C\u56E0\u4E3A\u9700\u8981\u79FB\u52A8\u5143\u7D20</p></div><ul><li>\u94FE\u8868\u5B58\u50A8<code>\u6709\u5E8F\u7684\u5143\u7D20\u96C6\u5408</code>\uFF0C\u4F46\u4E0D\u540C\u4E8E\u6570\u7EC4\uFF0C\u94FE\u8868\u4E2D\u7684\u5143\u7D20\u5728\u5185\u5B58\u4E2D\u5E76<code>\u4E0D\u662F\u8FDE\u7EED\u653E\u7F6E</code>\u7684</li><li>\u94FE\u8868\u7684\u6BCF\u4E2A\u5143\u7D20\u90FD\u7531<code>\u5143\u7D20\u7684\u503C</code>\u548C\u6307\u5411\u4E0B\u4E00\u4E2A\u5143\u7D20\u7684<code>\u6307\u9488</code>\u7EC4\u6210</li></ul><p>\u4E0B\u56FE\u5C55\u793A\u4E86\u4E00\u4E2A\u94FE\u8868\u7684\u7ED3\u6784\uFF1A</p><p><img src="'+t+'" alt="linked-list"></p><p>\u4E0E\u6570\u7EC4\u5BF9\u6BD4\uFF1A</p><ul><li>\u76F8\u5BF9\u4E8E\u4F20\u7EDF\u7684\u6570\u7EC4\uFF0C\u94FE\u8868\u7684\u4E00\u4E2A\u597D\u5904\u5728\u4E8E\uFF0C\u6DFB\u52A0\u6216\u79FB\u9664\u5143\u7D20\u7684\u65F6\u5019\u4E0D\u9700\u8981\u79FB\u52A8\u5176\u4ED6\u5143\u7D20</li><li>\u94FE\u8868\u9700\u8981\u4F7F\u7528<code>\u6307\u9488</code>,\u5176\u5B9E\u5C31\u662F\u5B58\u50A8<code>\u4E0B\u4E00\u4E2A\u94FE\u8868\u5143\u7D20</code></li><li>\u5728\u6570\u7EC4\u4E2D\uFF0C\u6211\u4EEC\u53EF\u4EE5\u76F4\u63A5\u8BBF\u95EE\u4EFB\u4F55\u4F4D\u7F6E\u7684\u4EFB\u4F55\u5143\u7D20\uFF0C\u800C\u8981\u60F3<strong>\u8BBF\u95EE\u94FE\u8868\u4E2D\u95F4\u7684\u4E00\u4E2A\u5143\u7D20\uFF0C\u5219\u9700\u8981\u4ECE\u8D77\u70B9(\u8868\u5934)\u5F00\u59CB\u8FED\u4EE3\u94FE\u8868\u76F4\u5230\u627E\u5230\u6240\u9700\u7684\u5143\u7D20</strong>\u3002</li></ul><p>\u6570\u636E\u7ED3\u6784\u5982\u4E0B\uFF1A</p><p><img src="'+p+`" alt="linked-list-show"></p><h2 id="\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5" aria-hidden="true">#</a> \u65B9\u6CD5</h2><p>\u6DFB\u52A0\u5220\u9664\u94FE\u8868\u5143\u7D20\u7684\u4E2D\u5FC3\u601D\u60F3\uFF1A\u6539\u53D8<code>head</code>\u6307\u9488\u548C<code>next</code>\u6307\u9488</p><table><thead><tr><th>\u65B9\u6CD5</th><th>\u8BF4\u660E</th><th>\u662F\u5426\u8FD4\u56DE</th></tr></thead><tbody><tr><td>push(element)</td><td>\u5411\u94FE\u8868\u5C3E\u90E8\u6DFB\u52A0\u4E00\u4E2A\u65B0\u5143\u7D20</td><td>false</td></tr><tr><td>insert(element, position)</td><td>\u5411\u94FE\u8868\u7684\u7279\u5B9A\u4F4D\u7F6E\u63D2\u5165\u4E00\u4E2A\u65B0\u5143\u7D20</td><td>false</td></tr><tr><td>getElementAt(index)</td><td>\u8FD4\u56DE\u7279\u5B9A\u4F4D\u7F6E\u7684\u5143\u7D20\u3002\u4E0D\u5B58\u5728\uFF0C\u5219\u8FD4\u56DE undefined</td><td>true</td></tr><tr><td>remove(element)</td><td>\u4ECE\u94FE\u8868\u4E2D\u79FB\u9664\u4E00\u4E2A\u5143\u7D20</td><td>true</td></tr><tr><td>indexOf(element)</td><td>\u8FD4\u56DE\u5143\u7D20\u7684\u7D22\u5F15\u3002\u5982\u679C\u94FE\u8868\u4E2D\u6CA1\u6709\u8BE5\u5143\u7D20\u5219\u8FD4\u56DE-1</td><td>true</td></tr><tr><td>removeAt(position)</td><td>\u4ECE\u94FE\u8868\u7684\u7279\u5B9A\u4F4D\u7F6E\u79FB\u9664\u4E00\u4E2A\u5143\u7D20</td><td>true</td></tr><tr><td>isEmpty()</td><td>\u4E0D\u5305\u542B\u4EFB\u4F55\u5143\u7D20\uFF0C\u8FD4\u56DE true\uFF1B\u5426\u5219\u8FD4\u56DE false</td><td>true</td></tr><tr><td>size()</td><td>\u8FD4\u56DE\u94FE\u8868\u5305\u542B\u7684\u5143\u7D20\u4E2A\u6570\uFF0C\u4E0E\u6570\u7EC4\u7684 length \u5C5E\u6027\u7C7B\u4F3C</td><td>true</td></tr><tr><td>toString()</td><td>\u8FD4\u56DE\u8868\u793A\u6574\u4E2A\u94FE\u8868\u7684\u5B57\u7B26\u4E32\u3002\u53EA\u8F93\u51FA\u5143\u7D20\u7684\u503C</td><td>true</td></tr></tbody></table><h2 id="\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0" aria-hidden="true">#</a> \u5B9E\u73B0</h2><h3 id="\u5B9A\u4E49\u94FE\u8868\u7684\u5143\u7D20\u7C7B" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49\u94FE\u8868\u7684\u5143\u7D20\u7C7B" aria-hidden="true">#</a> \u5B9A\u4E49\u94FE\u8868\u7684\u5143\u7D20\u7C7B</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u8BF4\u660E</p><ul><li><code>element</code>\uFF1A\u94FE\u8868\u5143\u7D20\u7684\u503C</li><li><code>next</code>\uFF1A\u6307\u5411\u94FE\u8868\u4E2D\u4E0B\u4E00\u4E2A\u5143\u7D20\u7684\u6307\u9488\uFF08\u5305\u62EC\u4E0B\u4E00\u4E2A\u5143\u7D20\u7684\u503C\u548C\u6307\u9488\uFF09</li><li>\u5F53\u4E00\u4E2A Node \u5B9E\u4F8B\u88AB\u521B\u5EFA\u65F6\uFF0C\u5B83\u7684 <code>next</code> \u6307\u9488\u603B\u662F <code>undefined</code></li></ul></div><h3 id="\u5B9A\u4E49\u94FE\u8868\u7C7B" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49\u94FE\u8868\u7C7B" aria-hidden="true">#</a> \u5B9A\u4E49\u94FE\u8868\u7C7B</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">defaultEquals</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">===</span> b
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">LinkedList</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">equalsFn <span class="token operator">=</span> defaultEquals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>equalsFn <span class="token operator">=</span> equalsFn
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u8BF4\u660E</p><ul><li><code>count</code>\uFF1A\u94FE\u8868\u4E2D\u5143\u7D20\u7684\u6570\u91CF</li><li><code>head</code>\uFF1A\u4FDD\u5B58\u7B2C\u4E00\u4E2A\u5143\u7D20\u7684\u5F15\u7528</li><li><code>equalsFn</code>\uFF1A\u6BD4\u8F83\u4E24\u4E2AJavaScript\u5BF9\u8C61\u6216\u503C\u662F\u5426\u76F8\u7B49\u7684\u81EA\u5B9A\u4E49\u51FD\u6570\uFF0C\u5982\u679C\u6CA1\u6709\u4F20\u5165\u81EA\u5B9A\u4E49\u51FD\u6570\uFF0C\u5219\u9ED8\u8BA4\u4F7F\u7528<code>defaultEquals</code>\u51FD\u6570</li></ul></div><h3 id="\u6DFB\u52A0\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u6DFB\u52A0\u5143\u7D20" aria-hidden="true">#</a> \u6DFB\u52A0\u5143\u7D20</h3><p>\u4E24\u4E2A\u573A\u666F\uFF1A</p><ul><li>\u94FE\u8868\u4E3A\u7A7A\uFF0C\u6DFB\u52A0\u7684\u662F\u7B2C\u4E00\u4E2A\u5143\u7D20</li><li>\u94FE\u8868\u4E0D\u4E3A\u7A7A\uFF0C\u5411\u5176\u8FFD\u52A0\u5143\u7D20</li></ul><p>\u94FE\u8868\u4E3A\u7A7A\uFF1A</p><p><img src="`+o+'" alt="null-push"></p><p>\u94FE\u8868\u4E0D\u4E3A\u7A7A\uFF1A</p><p><img src="'+c+`" alt="not-null-push"></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u94FE\u8868\u5143\u7D20</span>
  <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6DFB\u52A0\u7B2C\u4E00\u4E2A\u5143\u7D20</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
    <span class="token comment">// \u8FED\u4EE3\u94FE\u8868\u627E\u5230\u94FE\u8868\u6700\u540E\u4E00\u4E2A\u5143\u7D20</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    current<span class="token punctuation">.</span>next <span class="token operator">=</span> node
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B65\u9AA4\uFF1A</p><ol><li>\u4F20\u5165\u503C<code>element</code>\uFF0C\u521B\u5EFA<code>node</code>\u5143\u7D20</li><li>\u94FE\u8868\u4E3A\u7A7A <ol><li>\u6307\u9488<code>head</code> \u6307\u5411 <code>node</code> \u5143\u7D20\u3002\u4E0B\u4E00\u4E2A\u5143\u7D20\u81EA\u52A8\u4E3A<code>undefined</code>,\u56E0\u4E3A\u521B\u5EFA<code>node</code>\u5143\u7D20\u7684\u65F6\u5019\uFF0C<code>next</code>\u4E3A<code>undefined</code></li></ol></li><li>\u94FE\u8868\u4E0D\u4E3A\u7A7A <ol><li>\u5B9A\u4E49<code>current</code>\u8868\u793A\u5F53\u524D\u5143\u7D20\u7684\u6307\u9488<code>head</code>\uFF0C\u5FAA\u73AF\u94FE\u8868\uFF08\u5FAA\u73AF\u7EC8\u6B62\u6761\u4EF6\u4E3A<code>current.next == null</code>\uFF09\u67E5\u627E\u5230\u6700\u540E\u4E00\u4E2A\u5143\u7D20\uFF0C\u540C\u6837\u662F\u8D4B\u503C\u7ED9<code>current</code>,\u8DF3\u51FA\u5FAA\u73AF</li><li>\u5C06\u5F53\u524D\u5143\u7D20<code>current</code>\u7684\u6307\u9488<code>next</code>\u6307\u5411\u4E0B\u4E00\u4E2A\u94FE\u8868\u8282\u70B9</li></ol></li><li>\u6700\u540E\uFF0C\u9012\u589E\u94FE\u8868\u7684\u957F\u5EA6</li></ol><p>\u8BF4\u660E\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token keyword">null</span> 
<span class="token comment">// \u7B49\u4EF7\u4E8E\u4E0B\u5217\u8868\u8FBE\u5F0F</span>
<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span>

current<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> 
<span class="token comment">// \u7B49\u4EF7\u4E8E\u4E0B\u5217\u8868\u8FBE\u5F0F</span>
<span class="token punctuation">(</span>current<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6D4B\u8BD5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u79FB\u9664\u7279\u5B9A\u4F4D\u7F6E\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u79FB\u9664\u7279\u5B9A\u4F4D\u7F6E\u5143\u7D20" aria-hidden="true">#</a> \u79FB\u9664\u7279\u5B9A\u4F4D\u7F6E\u5143\u7D20</h3><ul><li>\u4ECE\u7279\u5B9A\u4F4D\u7F6E\u79FB\u9664\u4E00\u4E2A\u5143\u7D20\uFF08 removeAt \uFF09</li><li>\u6839\u636E\u5143\u7D20\u7684\u503C\u79FB\u9664\u5143\u7D20( remove )</li></ul><p>\u4E24\u79CD\u573A\u666F\uFF1A</p><ul><li>\u7B2C\u4E00\u79CD\u662F\u79FB\u9664\u7B2C\u4E00\u4E2A\u5143\u7D20</li><li>\u7B2C\u4E8C\u79CD\u662F\u79FB\u9664\u7B2C\u4E00\u4E2A\u5143\u7D20\u4E4B\u5916\u7684\u5176\u4ED6\u5143\u7D20</li></ul><p>\u5220\u9664\u7B2C\u4E00\u4E2A\u5143\u7D20\u7684\u56FE\u89E3\uFF1A</p><p><img src="`+l+'" alt="remove-first"></p><p>\u5220\u9664\u4EFB\u610F\u4F4D\u7F6E\u5143\u7D20\u7684\u56FE\u89E3\uFF1A</p><p><img src="'+i+`" alt="remove-any"></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head

    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5220\u9664\u7B2C\u4E00\u4E2A\u5143\u7D20</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> current<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> previous
      <span class="token comment">// \u8FED\u4EE3\u94FE\u8868\uFF0C\u627E\u5230\u76EE\u6807\u5143\u7D20\u7684\u524D\u4E00\u4E2A\u5143\u7D20\`previous\`\u548C\u540E\u4E00\u4E2A\u5143\u7D20\`current.next\`</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        previous <span class="token operator">=</span> current        
        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next     
      <span class="token punctuation">}</span>
      <span class="token comment">// \u5C06\u76EE\u6807\u5143\u7D20\u7684\u524D\u4E00\u4E2A\u5143\u7D20\u7684\u6307\u9488\u6307\u5411\u540E\u4E00\u4E2A\u5143\u7D20</span>
      previous<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span>
    <span class="token keyword">return</span> current<span class="token punctuation">.</span>element
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8BF4\u660E\uFF1A</p><ul><li>index:\u79FB\u9664\u7684\u5143\u7D20\u7684\u4F4D\u7F6E\uFF0C\u5E94\u8BE5\u662F\u4ECE0\u5F00\u59CB,\u4E14\u5C0F\u4E8E\u94FE\u8868\u5143\u7D20\u4E2A\u6570</li><li>\u8FD4\u56DE\u79FB\u51FA\u7684\u5143\u7D20\u7684\u503C\uFF0C\u5982\u679Cindex\u65E0\u6548\uFF0C\u5219\u8FD4\u56DE<code>undefined</code></li></ul><p>\u6B65\u9AA4\uFF1A</p><ol><li>\u6821\u9A8C<code>index</code>\u662F\u5426\u6709\u6548\uFF0C\u65E0\u6548\u8FD4\u56DE<code>undefined</code></li><li>\u79FB\u9664\u7B2C\u4E00\u4E2A\u5143\u7D20 <ol><li>\u5C31\u662F\u8BA9\u6307\u9488<code>head</code>\u6307\u5411\u7B2C\u4E8C\u4E2A\u5143\u7D20</li></ol></li><li>\u79FB\u9664\u7B2C\u4E00\u4E2A\u5143\u7D20\u4E4B\u5916\u7684\u5176\u4ED6\u5143\u7D20 <ol><li>\u8FED\u4EE3\u94FE\u8868\u7684\u8282\u70B9\uFF0C\u627E\u5230\u76EE\u6807\u5143\u7D20<code>current</code>\uFF0C\u5F53\u524D\u5143\u7D20\u7684\u524D\u4E00\u4E2A\u5143\u7D20<code>previous</code>\u548C\u540E\u4E00\u4E2A\u5143\u7D20<code>current.next</code></li><li>\u5C06\u76EE\u6807\u5143\u7D20\u7684\u7684\u524D\u4E00\u4E2A\u5143\u7D20\u7684\u6307\u9488\u6307\u5411\u76EE\u6807\u5143\u7D20\u7684\u540E\u4E00\u4E2A\u5143\u7D20</li></ol></li><li>\u6700\u540E\uFF0C\u9012\u51CF\u94FE\u8868\u7684\u957F\u5EA6\uFF0C\u8FD4\u56DE\u8981\u5220\u9664\u7684\u5143\u7D20\u7684\u503C</li></ol><h3 id="\u8FED\u4EE3\u94FE\u8868\u76F4\u5230\u76EE\u6807\u4F4D\u7F6E" tabindex="-1"><a class="header-anchor" href="#\u8FED\u4EE3\u94FE\u8868\u76F4\u5230\u76EE\u6807\u4F4D\u7F6E" aria-hidden="true">#</a> \u8FED\u4EE3\u94FE\u8868\u76F4\u5230\u76EE\u6807\u4F4D\u7F6E</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getElementAt</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index <span class="token operator">&amp;&amp;</span> node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node <span class="token operator">=</span> node<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8BF4\u660E</p><ul><li>\u6821\u9A8C<code>index</code>\u662F\u5426\u5408\u6CD5,\u5982\u679C\u4E0D\u5408\u6CD5\u8FD4\u56DE<code>undefined</code></li><li>\u7ED3\u675F\u5FAA\u73AF\u65F6\uFF0C node \u5143\u7D20 \u5C06\u662F index \u4F4D\u7F6E\u5143\u7D20\u7684\u5F15\u7528</li></ul><p>\u91CD\u6784<code>removeAt</code>\u65B9\u6CD5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> current<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> previous <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
      current <span class="token operator">=</span> previous<span class="token punctuation">.</span>next
      previous<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span>
    <span class="token keyword">return</span> current<span class="token punctuation">.</span>element
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u63D2\u5165\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u63D2\u5165\u5143\u7D20" aria-hidden="true">#</a> \u63D2\u5165\u5143\u7D20</h3><p>\u4E24\u79CD\u573A\u666F\uFF1A</p><ul><li>\u7B2C\u4E00\u79CD\u5728\u94FE\u8868\u7684\u8D77\u70B9\u6DFB\u52A0\u4E00\u4E2A\u5143\u7D20</li><li>\u7B2C\u4E8C\u79CD\u5728\u94FE\u8868\u4E2D\u95F4\u6216\u5C3E\u90E8\u6DFB\u52A0\u4E00\u4E2A\u5143\u7D20</li></ul><p>\u5728\u94FE\u8868\u7684\u8D77\u70B9\u6DFB\u52A0\u4E00\u4E2A\u5143\u7D20\u56FE\u89E3:</p><p><img src="`+u+'" alt="insert-first"></p><p>\u5728\u94FE\u8868\u4E2D\u95F4\u6216\u5C3E\u90E8\u6DFB\u52A0\u4E00\u4E2A\u5143\u7D20\u56FE\u89E3:</p><p><img src="'+r+'" alt="insert-last"></p><p><img src="'+d+`" alt="insert-any"></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
      node<span class="token punctuation">.</span>next <span class="token operator">=</span> current
      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> previous <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> current <span class="token operator">=</span> previous<span class="token punctuation">.</span>next
      node<span class="token punctuation">.</span>next <span class="token operator">=</span> current
      previous<span class="token punctuation">.</span>next <span class="token operator">=</span> node
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8BF4\u660E</p><ul><li>\u6821\u9A8C<code>index</code>\u662F\u5426\u5408\u6CD5,\u5982\u679C\u4E0D\u5408\u6CD5\u8FD4\u56DE<code>false</code></li><li>\u5728\u94FE\u8868\u7684\u8D77\u70B9\u6DFB\u52A0\u4E00\u4E2A\u5143\u7D20\uFF1A <ul><li>\u628A <code>node.next</code> \u7684\u503C\u8BBE\u4E3A <code>current</code></li><li>\u628A <code>head</code> \u7684\u5F15\u7528\u6539\u4E3A <code>node</code></li></ul></li><li>\u5728\u94FE\u8868\u4E2D\u95F4\u6216\u5C3E\u90E8\u6DFB\u52A0\u4E00\u4E2A\u5143\u7D20\uFF1A <ul><li>\u8FED\u4EE3\u94FE\u8868\uFF0C\u627E\u5230\u76EE\u6807\u4F4D\u7F6E</li><li>\u628A\u65B0\u5143\u7D20\u548C\u5F53\u524D\u5143\u7D20\u94FE\u63A5\u8D77\u6765</li><li>\u6539\u53D8 previous \u548C current \u4E4B\u95F4\u7684\u94FE\u63A5</li><li>\u8BA9 previous.next \u6307\u5411 node\uFF0C\u53D6\u4EE3 current</li></ul></li></ul><h3 id="\u67E5\u627E\u5143\u7D20\u7684\u4F4D\u7F6E" tabindex="-1"><a class="header-anchor" href="#\u67E5\u627E\u5143\u7D20\u7684\u4F4D\u7F6E" aria-hidden="true">#</a> \u67E5\u627E\u5143\u7D20\u7684\u4F4D\u7F6E</h3><p>indexOf \u65B9\u6CD5\u63A5\u6536\u4E00\u4E2A\u5143\u7D20\u7684\u503C\uFF0C\u5982\u679C\u5728\u94FE\u8868\u4E2D\u627E\u5230\u4E86\u5B83\uFF0C\u5C31\u8FD4\u56DE\u5143\u7D20\u7684\u4F4D\u7F6E\uFF0C\u5426\u5219\u8FD4\u56DE-1\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">&amp;&amp;</span> current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">equalsFn</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> current<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> i
    <span class="token punctuation">}</span>
    current <span class="token operator">=</span> current<span class="token punctuation">.</span>next
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8BF4\u660E\uFF1A</p><ul><li>\u4F7F\u7528\u4E00\u4E2A\u53D8\u91CF<code>current</code>\u6765\u5E2E\u52A9\u6211\u4EEC\u5FAA\u73AF\u8BBF\u95EE\u94FE\u8868</li><li>\u7136\u540E\u8FED\u4EE3\u5143\u7D20\uFF0C\u76F4\u5230\u94FE\u8868\u957F\u5EA6\u4E3A\u6B62\uFF0C\u4E3A\u4E86\u786E\u4FDD\u4E0D\u4F1A\u53D1\u751F\u8FD0\u884C\u65F6\u9519\u8BEF\uFF0C\u53EF\u4EE5\u9A8C\u8BC1\u4E00\u4E0B current \u53D8\u91CF\u662F\u5426\u4E3A null \u6216 undefined</li><li>\u6BCF\u6B21\u8FED\u4EE3\u65F6\uFF0C\u5C06\u9A8C\u8BC1 current \u8282\u70B9\u7684\u5143\u7D20\u548C\u76EE\u6807\u5143\u7D20\u662F\u5426\u76F8\u7B49</li></ul><h3 id="\u79FB\u9664\u7279\u5B9A\u7684\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u79FB\u9664\u7279\u5B9A\u7684\u5143\u7D20" aria-hidden="true">#</a> \u79FB\u9664\u7279\u5B9A\u7684\u5143\u7D20</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="size-isempty-gethead" tabindex="-1"><a class="header-anchor" href="#size-isempty-gethead" aria-hidden="true">#</a> size,isEmpty,getHead</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count
<span class="token punctuation">}</span>
<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> toString</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> objString <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>element<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    objString <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>objString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>current<span class="token punctuation">.</span>element<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    current <span class="token operator">=</span> current<span class="token punctuation">.</span>next
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> objString
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6700\u7EC8\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u6700\u7EC8\u4EE3\u7801" aria-hidden="true">#</a> \u6700\u7EC8\u4EE3\u7801</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">defaultEquals</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">===</span> b
<span class="token punctuation">}</span>
<span class="token comment">// \u94FE\u8868\u5143\u7D20</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u94FE\u8868\u7C7B</span>
<span class="token keyword">class</span> <span class="token class-name">LinkedList</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">equalsFn <span class="token operator">=</span> defaultEquals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>equalsFn <span class="token operator">=</span> equalsFn
  <span class="token punctuation">}</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
      <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next
      <span class="token punctuation">}</span>
      current<span class="token punctuation">.</span>next <span class="token operator">=</span> node
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> current<span class="token punctuation">.</span>next
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> previous <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        current <span class="token operator">=</span> previous<span class="token punctuation">.</span>next
        previous<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span>
      <span class="token keyword">return</span> current<span class="token punctuation">.</span>element
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
  <span class="token function">getElementAt</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index <span class="token operator">&amp;&amp;</span> node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span>next
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> node
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
        node<span class="token punctuation">.</span>next <span class="token operator">=</span> current
        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> node
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> previous <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> current <span class="token operator">=</span> previous<span class="token punctuation">.</span>next
        node<span class="token punctuation">.</span>next <span class="token operator">=</span> current
        previous<span class="token punctuation">.</span>next <span class="token operator">=</span> node
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">&amp;&amp;</span> current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">equalsFn</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> current<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> i
      <span class="token punctuation">}</span>
      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">}</span>

  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count
  <span class="token punctuation">}</span>
  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head
  <span class="token punctuation">}</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> objString <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>element<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      objString <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>objString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>current<span class="token punctuation">.</span>element<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> objString
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,78),m=[v];function b(h,y){return s(),a("div",null,m)}var f=n(k,[["render",b],["__file","linked-list.html.vue"]]);export{f as default};
