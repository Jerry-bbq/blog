import{_ as n,o as s,c as a,a as p}from"./app.ec8717cf.js";var t="/blog/assets/tree.b1b986fe.png",e="/blog/assets/binary-search-tree.e1b065ff.png",o="/blog/assets/inOrderTraverse.cb973cf6.png",c="/blog/assets/preOrderTraverse.6d5d70ce.png",l="/blog/assets/postOrderTraverse.1c25e386.png";const i={},u=p('<h1 id="\u6811" tabindex="-1"><a class="header-anchor" href="#\u6811" aria-hidden="true">#</a> \u6811</h1><p>\u5230\u76EE\u524D\u4E3A\u6B62\uFF0C\u5DF2\u7ECF\u4ECB\u7ECD\u4E86\u4E00\u4E9B\u987A\u5E8F\u6570\u636E\u7ED3\u6784\uFF0C\u800C\u7B2C\u4E00\u4E2A\u975E\u987A\u5E8F\u6570\u636E\u7ED3\u6784\u662F\u6563\u5217\u8868\u3002\u73B0\u5728\u5B66\u4E60\u53E6\u4E00\u79CD\u975E\u987A\u5E8F\u6570\u636E\u7ED3\u6784\u2014\u2014\u6811\uFF0C\u5B83\u5BF9\u4E8E\u5B58\u50A8\u9700\u8981\u5FEB\u901F\u67E5\u627E\u7684\u6570\u636E\u975E\u5E38\u6709\u7528</p><p><img src="'+t+'" alt="tree"></p><ul><li>\u6839\u8282\u70B9\uFF1A\u4F4D\u4E8E\u6811\u9876\u90E8\u7684\u8282\u70B9\uFF0811\uFF09</li><li>\u8282\u70B9\uFF1A\u6811\u4E2D\u7684\u6BCF\u4E2A\u5143\u7D20</li><li>\u5185\u90E8\u8282\u70B9\uFF1A\u81F3\u5C11\u6709\u4E00\u4E2A\u5B50\u8282\u70B9\u7684\u8282\u70B9\uFF0811\uFF0C7\uFF0C5\uFF0C9\uFF0C15\uFF0C13\uFF0C20\uFF09</li><li>\u5916\u90E8\u8282\u70B9\uFF1A\u6CA1\u6709\u5B50\u5143\u7D20\u7684\u8282\u70B9\uFF083\uFF0C6\uFF0C8\uFF0C10\uFF0C12\uFF0C14\uFF0C18\uFF0C25\uFF09</li><li>\u5B50\u6811\uFF1A\u8282\u70B9\u548C\u5B83\u7684\u540E\u4EE3\u6784\u6210</li></ul><h2 id="\u4E8C\u53C9\u6811\u548C\u4E8C\u53C9\u641C\u7D22\u6811" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811\u548C\u4E8C\u53C9\u641C\u7D22\u6811" aria-hidden="true">#</a> \u4E8C\u53C9\u6811\u548C\u4E8C\u53C9\u641C\u7D22\u6811</h2><p><strong>\u4E8C\u53C9\u6811</strong>\u4E2D\u7684\u8282\u70B9\u6700\u591A\u53EA\u80FD\u6709\u4E24\u4E2A\u5B50\u8282\u70B9\uFF1A\u4E00\u4E2A\u662F\u5DE6\u4FA7\u5B50\u8282\u70B9\uFF0C\u53E6\u4E00\u4E2A\u662F\u53F3\u4FA7\u5B50\u8282\u70B9</p><p><strong>\u4E8C\u53C9\u641C\u7D22\u6811</strong>\uFF08<code>BST</code>\uFF09\u662F\u4E8C\u53C9\u6811\u7684\u4E00\u79CD\uFF0C\u4F46\u662F\u53EA\u5141\u8BB8\u5728<code>\u5DE6\u4FA7\u8282\u70B9</code>\u5B58\u50A8\uFF08\u6BD4\u7236\u8282\u70B9\uFF09<code>\u5C0F</code>\u7684\u503C\uFF0C\u5728<code>\u53F3\u4FA7\u8282\u70B9</code>\u5B58\u50A8\uFF08\u6BD4\u7236\u8282\u70B9\uFF09<code>\u5927</code>\u7684\u503C\u3002\u4E0A\u56FE\u5C55\u793A\u4E86\u4E00\u68F5\u4E8C\u53C9\u641C\u7D22\u6811</p><h2 id="\u521B\u5EFA\u4E8C\u53C9\u641C\u7D22\u6811\u7C7B" tabindex="-1"><a class="header-anchor" href="#\u521B\u5EFA\u4E8C\u53C9\u641C\u7D22\u6811\u7C7B" aria-hidden="true">#</a> \u521B\u5EFA\u4E8C\u53C9\u641C\u7D22\u6811\u7C7B</h2><p>\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u6570\u636E\u7ED3\u6784\u7EC4\u7EC7\u56FE\uFF1A</p><p><img src="'+e+`" alt="tree"></p><ul><li>\u548C\u94FE\u8868\u4E00\u6837\uFF0C\u901A\u8FC7\u6307\u9488\u6765\u8868\u793A\u8282\u70B9\u95F4\u7684\u5173\u7CFB</li><li>\u4E24\u4E2A\u6307\u9488\uFF0C\u4E00\u4E2A\u6307\u5411\u5DE6\u4FA7\u5B50\u8282\u70B9\uFF0C\u53E6\u4E00\u4E2A\u6307\u9488\u6307\u5411\u53F3\u4FA7\u5B50\u8282\u70B9</li><li>\u5728\u8FD9\u91CC\uFF0C\u5C06\u8282\u70B9\u79F0\u4E3A<code>\u952E</code>\uFF0C<code>\u952E</code>\u662F\u6811\u76F8\u5173\u7684\u672F\u8BED\u4E2D\u5BF9\u8282\u70B9\u7684\u79F0\u547C</li></ul><h3 id="\u521B\u5EFA\u8282\u70B9\u7C7Bnode" tabindex="-1"><a class="header-anchor" href="#\u521B\u5EFA\u8282\u70B9\u7C7Bnode" aria-hidden="true">#</a> \u521B\u5EFA\u8282\u70B9\u7C7BNode</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key    <span class="token comment">//  \u8282\u70B9\u503C</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment">// \u5DE6\u4FA7\u5B50\u8282\u70B9\u5F15\u7528</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// \u53F3\u4FA7\u5B50\u8282\u70B9\u5F15\u7528</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5DE5\u5177\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u5DE5\u5177\u51FD\u6570" aria-hidden="true">#</a> \u5DE5\u5177\u51FD\u6570</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Compare <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">LESS_THAN</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BIGGER_THAN</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">defaultCompare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span> <span class="token operator">:</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u521B\u5EFAbinarysearchtree\u7C7B" tabindex="-1"><a class="header-anchor" href="#\u521B\u5EFAbinarysearchtree\u7C7B" aria-hidden="true">#</a> \u521B\u5EFABinarySearchTree\u7C7B</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">compareFn <span class="token operator">=</span> defaultCompare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>compareFn <span class="token operator">=</span> compareFn  <span class="token comment">// \u7528\u6765\u6BD4\u8F83\u8282\u70B9\u503C</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token comment">// Node \u7C7B\u578B\u7684\u6839\u8282\u70B9</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5" aria-hidden="true">#</a> \u65B9\u6CD5</h2><table><thead><tr><th>\u65B9\u6CD5</th><th>\u8BF4\u660E</th><th>\u662F\u5426\u8FD4\u56DE</th></tr></thead><tbody><tr><td>insert(key)</td><td>\u5411\u6811\u4E2D\u63D2\u5165\u4E00\u4E2A\u65B0\u7684\u952E</td><td>false</td></tr><tr><td>search(key)</td><td>\u5728\u6811\u4E2D\u67E5\u627E\u4E00\u4E2A\u952E\uFF0C\u662F\u5426\u5B58\u5728</td><td>true</td></tr><tr><td>inOrderTraverse()</td><td>\u901A\u8FC7<code>\u4E2D\u5E8F\u904D\u5386</code>\u65B9\u5F0F\u904D\u5386\u6240\u6709\u8282\u70B9</td><td>false</td></tr><tr><td>preOrderTraverse()</td><td>\u901A\u8FC7<code>\u5148\u5E8F\u904D\u5386</code>\u65B9\u5F0F\u904D\u5386\u6240\u6709\u8282\u70B9</td><td>false</td></tr><tr><td>postOrderTraverse()</td><td>\u901A\u8FC7<code>\u540E\u5E8F\u904D\u5386</code>\u65B9\u5F0F\u904D\u5386\u6240\u6709\u8282\u70B9</td><td>false</td></tr><tr><td>min()</td><td>\u8FD4\u56DE\u6811\u4E2D\u6700\u5C0F\u7684\u503C/\u952E</td><td>true</td></tr><tr><td>max()</td><td>\u8FD4\u56DE\u6811\u4E2D\u6700\u5927\u7684\u503C/\u952E</td><td>true</td></tr><tr><td>remove(key)</td><td>\u4ECE\u6811\u4E2D\u79FB\u9664\u67D0\u4E2A\u952E</td><td>true</td></tr></tbody></table><h2 id="\u5411\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u63D2\u5165\u4E00\u4E2A\u952E" tabindex="-1"><a class="header-anchor" href="#\u5411\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u63D2\u5165\u4E00\u4E2A\u952E" aria-hidden="true">#</a> \u5411\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u63D2\u5165\u4E00\u4E2A\u952E</h2><p>\u6B65\u9AA4\uFF1A</p><ul><li>\u7B2C\u4E00\u6B65\u662F\u9A8C\u8BC1\u63D2\u5165\u64CD\u4F5C\u662F\u5426\u662F\u7279\u6B8A\u60C5\u51B5</li><li>\u7B2C\u4E8C\u6B65\u662F\u5C06\u8282\u70B9\u6DFB\u52A0\u5230\u6839\u8282\u70B9\u4EE5\u5916\u7684\u5176\u4ED6\u4F4D\u7F6E <ul><li>\u901A\u8FC7\u53C2\u6570\u4F20\u5165\u6811\u7684\u6839\u8282\u70B9\u548C\u8981\u63D2\u5165\u7684\u8282\u70B9</li><li>\u5982\u679C\u65B0\u8282\u70B9\u7684\u952E\u5C0F\u4E8E\u5F53\u524D\u8282\u70B9\u7684\u952E\uFF0C\u90A3\u4E48\u9700\u8981\u68C0\u67E5\u5F53\u524D\u8282\u70B9\u7684\u5DE6\u4FA7\u5B50\u8282\u70B9 <ul><li>\u5982\u679C\u5B83\u6CA1\u6709\u5DE6\u4FA7\u5B50\u8282\u70B9\uFF0C\u5C31\u5728\u90A3\u91CC\u63D2\u5165\u65B0\u7684\u8282\u70B9</li><li>\u5982\u679C\u6709\u5DE6\u4FA7\u5B50\u8282\u70B9\uFF0C\u9700\u8981\u901A\u8FC7\u9012\u5F52\u8C03\u7528 insertNode\u65B9\u6CD5\u7EE7\u7EED\u627E\u5230\u6811\u7684\u4E0B\u4E00\u5C42\uFF0C\u6BD4\u8F83\u7684\u8282\u70B9\u5C06\u4F1A\u662F\u5F53\u524D\u8282\u70B9\u7684\u5DE6\u4FA7\u5B50\u8282\u70B9</li></ul></li><li>\u5982\u679C\u8282\u70B9\u7684\u952E\u6BD4\u5F53\u524D\u8282\u70B9\u7684\u952E\u5927 <ul><li>\u540C\u65F6\u5F53\u524D\u8282\u70B9\u6CA1\u6709\u53F3\u4FA7\u5B50\u8282\u70B9\uFF0C\u5C31\u5728\u90A3\u91CC\u63D2\u5165\u65B0\u7684\u8282\u70B9</li><li>\u5982\u679C\u6709\u53F3\u4FA7\u5B50\u8282\u70B9\uFF0C\u540C\u6837\u9700\u8981\u9012\u5F52\u8C03\u7528 insertNode \u65B9\u6CD5\uFF0C\u4F46\u662F\u8981\u7528\u6765\u548C\u65B0\u8282\u70B9\u6BD4\u8F83\u7684\u8282\u70B9\u5C06\u4F1A\u662F\u53F3\u4FA7\u5B50\u8282\u70B9</li></ul></li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareFn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6D4B\u8BD5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>
tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6811\u7684\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u6811\u7684\u904D\u5386" aria-hidden="true">#</a> \u6811\u7684\u904D\u5386</h2><p>\u8BBF\u95EE\u6811\u7684\u6240\u6709\u8282\u70B9\u6709\u4E09\u79CD\u65B9\u5F0F\uFF1A<strong>\u4E2D\u5E8F</strong>\u3001<strong>\u5148\u5E8F</strong>\u548C<strong>\u540E\u5E8F</strong></p><h3 id="\u4E2D\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u4E2D\u5E8F\u904D\u5386" aria-hidden="true">#</a> \u4E2D\u5E8F\u904D\u5386</h3><p>\u4E2D\u5E8F\u904D\u5386\u662F\u4E00\u79CD\u4EE5\u4E0A\u884C\u987A\u5E8F\u8BBF\u95EE BST \u6240\u6709\u8282\u70B9\u7684\u904D\u5386\u65B9\u5F0F\uFF0C\u4E5F\u5C31\u662F\u4EE5<strong>\u4ECE\u6700\u5C0F\u5230\u6700\u5927\u7684\u987A\u5E8F\u8BBF\u95EE\u6240\u6709\u8282\u70B9</strong>\u3002\u4E2D\u5E8F\u904D\u5386\u7684\u4E00\u79CD\u5E94\u7528\u5C31\u662F\u5BF9\u6811\u8FDB\u884C<strong>\u6392\u5E8F\u64CD\u4F5C</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">inOrderTraverse</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>callback\uFF1A\u5B9A\u4E49\u6211\u4EEC\u5BF9\u904D\u5386\u5230\u7684\u6BCF\u4E2A\u8282\u70B9\u8FDB\u884C\u7684\u64CD\u4F5C</li><li>\u68C0\u67E5\u4EE5\u53C2\u6570\u5F62\u5F0F\u4F20\u5165\u7684\u8282\u70B9\u662F\u5426\u4E3A null\u2014\u2014\u8FD9\u5C31\u662F\u505C\u6B62\u9012\u5F52\u7EE7\u7EED\u6267\u884C\u7684\u5224\u65AD\u6761\u4EF6\uFF0C\u5373\u9012\u5F52\u7B97\u6CD5\u7684\u57FA\u7EBF\u6761\u4EF6</li></ul><p>\u6D4B\u8BD5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">printNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> 
tree<span class="token punctuation">.</span><span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>printNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3 5 6 7 8 9 10 11 12 13 14 15 18 20 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0B\u56FE\u63CF\u7ED8\u4E86 inOrderTraverse \u65B9\u6CD5\u7684\u8BBF\u95EE\u8DEF\u5F84\uFF1A</p><p><img src="`+o+`" alt="tree"></p><h3 id="\u5148\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u5148\u5E8F\u904D\u5386" aria-hidden="true">#</a> \u5148\u5E8F\u904D\u5386</h3><p>\u5148\u5E8F\u904D\u5386\u662F\u4EE5<strong>\u4F18\u5148\u4E8E\u540E\u4EE3\u8282\u70B9\u7684\u987A\u5E8F</strong>\u8BBF\u95EE\u6BCF\u4E2A\u8282\u70B9\u7684\u3002\u5148\u5E8F\u904D\u5386\u7684\u4E00\u79CD\u5E94\u7528\u662F\u6253\u5370\u4E00\u4E2A\u7ED3\u6784\u5316\u7684\u6587\u6863</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">preOrderTraverse</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token comment">// {1}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token comment">// {2}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token comment">// {3}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5148\u5E8F\u904D\u5386\u548C\u4E2D\u5E8F\u904D\u5386\u7684\u4E0D\u540C\u70B9\u662F\uFF0C\u5148\u5E8F\u904D\u5386\u4F1A\u5148\u8BBF\u95EE\u8282\u70B9\u672C\u8EAB\uFF08\u884C{1}\uFF09\uFF0C\u7136\u540E\u518D\u8BBF\u95EE\u5B83\u7684\u5DE6\u4FA7\u5B50\u8282\u70B9\uFF08\u884C{2}\uFF09\uFF0C\u6700\u540E\u662F\u53F3\u4FA7\u5B50\u8282\u70B9\uFF08\u884C{3}\uFF09,\u800C\u4E2D\u5E8F\u904D\u5386\u7684\u6267\u884C\u987A\u5E8F\u662F\uFF1A {2}\u3001 {1}\u548C{3}\u3002</p><p>\u6D4B\u8BD5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">printNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> 
tree<span class="token punctuation">.</span><span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>printNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 11 7 5 3 6 9 8 10 15 13 12 14 20 18 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0B\u56FE\u63CF\u7ED8\u4E86 preOrderTraverse \u65B9\u6CD5\u7684\u8BBF\u95EE\u8DEF\u5F84\uFF1A</p><p><img src="`+c+`" alt="tree"></p><h3 id="\u540E\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u540E\u5E8F\u904D\u5386" aria-hidden="true">#</a> \u540E\u5E8F\u904D\u5386</h3><p>\u540E\u5E8F\u904D\u5386\u5219\u662F<strong>\u5148\u8BBF\u95EE\u8282\u70B9\u7684\u540E\u4EE3\u8282\u70B9\uFF0C\u518D\u8BBF\u95EE\u8282\u70B9\u672C\u8EAB</strong>\u3002\u540E\u5E8F\u904D\u5386\u7684\u4E00\u79CD\u5E94\u7528\u662F\u8BA1\u7B97\u4E00\u4E2A\u76EE\u5F55\u53CA\u5176\u5B50\u76EE\u5F55\u4E2D\u6240\u6709\u6587\u4EF6\u6240\u5360\u7A7A\u95F4\u7684\u5927\u5C0F</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">postOrderTraverse</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token comment">// {1}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token comment">// {2}</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment">// {3}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u540E\u5E8F\u904D\u5386\u4F1A\u5148\u8BBF\u95EE\u5DE6\u4FA7\u5B50\u8282\u70B9\uFF08\u884C{1}\uFF09\uFF0C\u7136\u540E\u662F\u53F3\u4FA7\u5B50\u8282\u70B9\uFF08\u884C{2}\uFF09\uFF0C\u6700\u540E\u662F\u7236\u8282\u70B9\u672C\u8EAB\uFF08\u884C{3}\uFF09\u3002</p><p>\u4E2D\u5E8F\u3001\u5148\u5E8F\u548C\u540E\u5E8F\u904D\u5386\u7684\u5B9E\u73B0\u65B9\u5F0F\u662F\u5F88\u76F8\u4F3C\u7684\uFF0C\u552F\u4E00\u4E0D\u540C\u7684\u662F\u884C{1}\u3001 {2}\u548C{3}\u6811\u7684\u6267\u884C\u987A\u5E8F\u3002</p><p>\u6D4B\u8BD5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">printNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> 
tree<span class="token punctuation">.</span><span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>printNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 11 7 5 3 6 9 8 10 15 13 12 14 20 18 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0B\u56FE\u63CF\u7ED8\u4E86 postOrderTraverse \u65B9\u6CD5\u7684\u8BBF\u95EE\u8DEF\u5F84\uFF1A</p><p><img src="`+l+`" alt="tree"></p><h3 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h3><p>\u4E2D\u5E8F\u3001\u5148\u5E8F\u3001\u540E\u5E8F\u904D\u5386\u51FD\u6570\u7684\u552F\u4E00\u533A\u522B\u5C31\u662F<code>callback</code>\u51FD\u6570\u7684\u5728\u9012\u5F52\u5DE6\u4FA7\u548C\u53F3\u4FA7\u6811\u7684\u4F4D\u7F6E\uFF1A</p><ul><li>\u4E2D\u5E8F\uFF1A<code>callback</code>\u5728\u4E2D\u95F4\u4F4D\u7F6E</li><li>\u5148\u5E8F\uFF1A<code>callback</code>\u5728\u524D\u9762\u4F4D\u7F6E</li><li>\u540E\u5E8F\uFF1A<code>callback</code>\u5728\u540E\u9762\u4F4D\u7F6E</li></ul><h2 id="\u6811\u7684\u641C\u7D22" tabindex="-1"><a class="header-anchor" href="#\u6811\u7684\u641C\u7D22" aria-hidden="true">#</a> \u6811\u7684\u641C\u7D22</h2><p>\u5728\u6811\u4E2D\uFF0C\u6709\u4E09\u79CD\u7ECF\u5E38\u6267\u884C\u7684\u641C\u7D22\u7C7B\u578B\uFF1A</p><ul><li>\u641C\u7D22\u6700\u5C0F\u503C</li><li>\u641C\u7D22\u6700\u5927\u503C</li><li>\u641C\u7D22\u7279\u5B9A\u7684\u503C</li></ul><h3 id="\u641C\u7D22\u6700\u5C0F\u503C\u548C\u6700\u5927\u503C" tabindex="-1"><a class="header-anchor" href="#\u641C\u7D22\u6700\u5C0F\u503C\u548C\u6700\u5927\u503C" aria-hidden="true">#</a> \u641C\u7D22\u6700\u5C0F\u503C\u548C\u6700\u5927\u503C</h3><p>\u5BF9\u4E8E\u5BFB\u627E\u6700\u5C0F\u503C\uFF0C\u603B\u662F\u6CBF\u7740\u6811\u7684\u5DE6\u8FB9\uFF1B\u800C\u5BF9\u4E8E\u5BFB\u627E\u6700\u5927\u503C\uFF0C\u603B\u662F\u6CBF\u7740\u6811\u7684\u53F3\u8FB9\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">minNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">minNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> current <span class="token operator">=</span> node
  <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    current <span class="token operator">=</span> current<span class="token punctuation">.</span>left
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> current
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>minNode \u65B9\u6CD5\u5141\u8BB8\u6211\u4EEC\u4ECE\u6811\u4E2D\u4EFB\u610F\u4E00\u4E2A\u8282\u70B9\u5F00\u59CB\u5BFB\u627E\u6700\u5C0F\u7684\u952E</li><li>\u53EF\u4EE5\u4F7F\u7528\u5B83\u6765\u627E\u5230\u4E00\u68F5\u6811\u6216\u5176\u5B50\u6811\u4E2D\u6700\u5C0F\u7684\u952E</li><li>\u56E0\u6B64\uFF0C\u6211\u4EEC\u5728\u8C03\u7528 minNode \u65B9\u6CD5\u7684\u65F6\u5019\u4F20\u5165\u6811\u7684\u6839\u8282\u70B9</li><li>\u904D\u5386\u5230\u6811\u6700\u5DE6\u7AEF\u7684\u8282\u70B9</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">maxNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">maxNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> current <span class="token operator">=</span> node
  <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    current <span class="token operator">=</span> current<span class="token punctuation">.</span>right
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> current
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u6CBF\u7740\u6811\u7684\u53F3\u8FB9\u8FDB\u884C\u904D\u5386\uFF0C\u76F4\u5230\u627E\u5230\u6700\u53F3\u7AEF\u7684\u8282\u70B9</li></ul><h3 id="\u641C\u7D22\u4E00\u4E2A\u7279\u5B9A\u7684\u503C" tabindex="-1"><a class="header-anchor" href="#\u641C\u7D22\u4E00\u4E2A\u7279\u5B9A\u7684\u503C" aria-hidden="true">#</a> \u641C\u7D22\u4E00\u4E2A\u7279\u5B9A\u7684\u503C</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareFn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareFn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>searchNode \u65B9\u6CD5\u53EF\u4EE5\u7528\u6765\u5BFB\u627E\u4E00\u68F5\u6811\u6216\u5176\u4EFB\u610F\u5B50\u6811\u4E2D\u7684\u4E00\u4E2A\u7279\u5B9A\u7684\u503C</li></ul><h3 id="\u79FB\u9664\u4E00\u4E2A\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u79FB\u9664\u4E00\u4E2A\u8282\u70B9" aria-hidden="true">#</a> \u79FB\u9664\u4E00\u4E2A\u8282\u70B9</h3><p>\u6B65\u9AA4\uFF1A</p><ul><li>\u952E\u4E0D\u5B58\u5728\u4E8E\u6811\u4E2D\uFF0C\u8FD4\u56DE<code>null</code></li><li>\u5982\u679C\u8981\u627E\u7684\u952E\u6BD4\u5F53\u524D\u8282\u70B9\u7684\u503C\u5C0F\uFF0C\u5C31\u6CBF\u7740\u6811\u7684\u5DE6\u8FB9\u627E\u5230\u4E0B\u4E00\u4E2A\u8282\u70B9</li><li>\u5982\u679C\u8981\u627E\u7684\u952E\u6BD4\u5F53\u524D\u8282\u70B9\u7684\u503C\u5927\uFF0C\u5C31\u6CBF\u7740\u6811\u7684\u53F3\u8FB9\u627E\u5230\u4E0B\u4E00\u4E2A\u8282\u70B9</li><li>\u627E\u5230\u4E86\u8981\u627E\u7684\u952E\u5373\uFF1A\u952E\u7B49\u4E8E<code>node.key</code><ul><li>\u7B2C\u4E00\u79CD\u60C5\u51B5\uFF1A\u8BE5\u8282\u70B9\u662F\u4E00\u4E2A\u6CA1\u6709\u5DE6\u4FA7\u6216\u53F3\u4FA7\u5B50\u8282\u70B9\u7684\u53F6\u8282\u70B9 <ul><li>\u7ED9\u8FD9\u4E2A\u8282\u70B9\u8D4B\u4E88 null \u503C\u6765\u79FB\u9664\u5B83</li></ul></li><li>\u7B2C\u4E8C\u79CD\u60C5\u51B5\uFF1A\u79FB\u9664\u6709\u4E00\u4E2A\u5DE6\u4FA7\u5B50\u8282\u70B9\u6216\u53F3\u4FA7\u5B50\u8282\u70B9\u7684\u8282\u70B9 <ul><li>\u8DF3\u8FC7\u8FD9\u4E2A\u8282\u70B9\uFF0C\u76F4\u63A5\u5C06\u7236\u8282\u70B9\u6307\u5411\u5B83\u7684\u6307\u9488\u6307\u5411\u5B50\u8282\u70B9</li></ul></li><li>\u7B2C\u4E09\u79CD\u60C5\u51B5\uFF1A\u79FB\u9664\u6709\u4E24\u4E2A\u5B50\u8282\u70B9\u7684\u8282\u70B9 <ul><li>\u5F53\u627E\u5230\u4E86\u8981\u79FB\u9664\u7684\u8282\u70B9\u540E\uFF0C\u9700\u8981\u627E\u5230\u5B83\u53F3\u8FB9\u5B50\u6811\u4E2D\u6700\u5C0F\u7684\u8282\u70B9</li><li>\u7528\u5B83\u53F3\u4FA7\u5B50\u6811\u4E2D\u6700\u5C0F\u8282\u70B9\u7684\u952E\u53BB\u66F4\u65B0\u8FD9\u4E2A\u8282\u70B9\u7684\u503C</li><li>\u7EE7\u7EED\u628A\u53F3\u4FA7\u5B50\u6811\u4E2D\u7684\u6700\u5C0F\u8282\u70B9\u79FB\u9664</li><li>\u5411\u5B83\u7684\u7236\u8282\u70B9\u8FD4\u56DE\u66F4\u65B0\u540E\u8282\u70B9\u7684\u5F15\u7528</li></ul></li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareFn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareFn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7B2C\u4E00\u79CD\u60C5\u51B5</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token keyword">return</span> node
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7B2C\u4E8C\u79CD\u60C5\u51B5</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node <span class="token operator">=</span> node<span class="token punctuation">.</span>right
      <span class="token keyword">return</span> node
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node <span class="token operator">=</span> node<span class="token punctuation">.</span>left
      <span class="token keyword">return</span> node
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7B2C\u4E09\u79CD\u60C5\u51B5</span>
    <span class="token keyword">const</span> aux <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">minNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    node<span class="token punctuation">.</span>key <span class="token operator">=</span> aux<span class="token punctuation">.</span>key
    node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> aux<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>root \u88AB\u8D4B\u503C\u4E3A removeNode \u65B9\u6CD5\u7684\u8FD4\u56DE\u503C</li></ul><h2 id="\u6700\u7EC8\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u6700\u7EC8\u5B9E\u73B0" aria-hidden="true">#</a> \u6700\u7EC8\u5B9E\u73B0</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Compare <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">LESS_THAN</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BIGGER_THAN</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">defaultCompare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span> <span class="token operator">:</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key <span class="token comment">//  \u8282\u70B9\u503C</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// \u5DE6\u4FA7\u5B50\u8282\u70B9\u5F15\u7528</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// \u53F3\u4FA7\u5B50\u8282\u70B9\u5F15\u7528</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">compareFn <span class="token operator">=</span> defaultCompare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>compareFn <span class="token operator">=</span> compareFn <span class="token comment">// \u7528\u6765\u6BD4\u8F83\u8282\u70B9\u503C</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// Node \u7C7B\u578B\u7684\u6839\u8282\u70B9</span>
  <span class="token punctuation">}</span>
  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareFn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">postOrderTraverse</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postOrderTraverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">minNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">minNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> current <span class="token operator">=</span> node
    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      current <span class="token operator">=</span> current<span class="token punctuation">.</span>left
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> current
  <span class="token punctuation">}</span>

  <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">maxNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">maxNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> current <span class="token operator">=</span> node
    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      current <span class="token operator">=</span> current<span class="token punctuation">.</span>right
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> current
  <span class="token punctuation">}</span>

  <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">searchNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareFn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareFn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareFn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">LESS_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token keyword">return</span> node
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareFn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> Compare<span class="token punctuation">.</span><span class="token constant">BIGGER_THAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token keyword">return</span> node
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">return</span> node
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span>right
        <span class="token keyword">return</span> node
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span>left
        <span class="token keyword">return</span> node
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> aux <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">minNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
      node<span class="token punctuation">.</span>key <span class="token operator">=</span> aux<span class="token punctuation">.</span>key
      node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> aux<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
      <span class="token keyword">return</span> node
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,74),k=[u];function r(d,v){return s(),a("div",null,k)}var b=n(i,[["render",r],["__file","bst.html.vue"]]);export{b as default};
