(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{523:function(s,e,n){"use strict";n.r(e);var p=n(26),l=Object(p.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"gulp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gulp"}},[s._v("#")]),s._v(" Gulp")]),s._v(" "),n("p",[s._v("前端构建化工具（工程化式管理前端）")]),s._v(" "),n("p",[s._v("webpack、grunt、gulp（都基于nodejs）")]),s._v(" "),n("ul",[n("li",[s._v("grunt：前端工程化的先驱")]),s._v(" "),n("li",[s._v("gulp：更自然基于流的方式连接任务，Gulp基于nodejs中stream，效率更好语法更自然,不需要编写复杂的配置文件")]),s._v(" "),n("li",[s._v("webpack：最年轻，擅长用于依赖管理，配置稍较复杂（webpack+npm）")])]),s._v(" "),n("p",[s._v("自动化构建工具的作用：")]),s._v(" "),n("ul",[n("li",[s._v("压缩合并js/css")]),s._v(" "),n("li",[s._v("编译less、sass")]),s._v(" "),n("li",[s._v("批量压缩图片")]),s._v(" "),n("li",[s._v("模块化开发")]),s._v(" "),n("li",[s._v("单元测试")]),s._v(" "),n("li",[s._v("等等...")])]),s._v(" "),n("h2",{attrs:{id:"api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[s._v("#")]),s._v(" api")]),s._v(" "),n("ol",[n("li",[s._v("gulp.src(globs[, options])")])]),s._v(" "),n("p",[s._v("1.1、说明：src方法是指定需要处理的源文件的路径，gulp借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，gulp.src返回当前文件流至可用插件；")]),s._v(" "),n("p",[s._v("1.2、globs：需要处理的源文件匹配符路径。类型(必填)：String or StringArray；")]),s._v(" "),n("p",[s._v("通配符路径匹配示例：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("“src/a.js”：指定具体文件；")])]),s._v(" "),n("li",[n("p",[s._v("“"),n("em",[s._v("”：匹配所有文件    例：src/")]),s._v(".js(包含src下的所有js文件)；")])]),s._v(" "),n("li",[n("p",[s._v("“"),n("strong",[s._v("”：匹配0个或多个子文件夹    例：src/")]),s._v("/*.js(包含src的0个或多个子文件夹下的js文件)；")])]),s._v(" "),n("li",[n("p",[s._v("“{}”：匹配多个属性    例：src/{a,b}.js(包含a.js和b.js文件)  src/*.{jpg,png,gif}(src下的所有jpg/png/gif文件)；")])]),s._v(" "),n("li",[n("p",[s._v("“!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("  var gulp = require('gulp'),\n      less = require('gulp-less');\n   \n  gulp.task('testLess', function () {\n      //gulp.src('less/test/style.less')\n      gulp.src(['less/**/*.less','!less/{extend,page}/*.less'])\n          .pipe(less())\n          .pipe(gulp.dest('./css'));\n  });\n")])])]),n("p",[s._v("1.3、options：  类型(可选)：Object，有3个属性buffer、read、base；")]),s._v(" "),n("p",[s._v("(1) options.buffer：  类型：Boolean  默认：true 设置为false，将返回file.content的流并且不缓冲文件，处理大文件时非常有用；")]),s._v(" "),n("p",[s._v("(2) options.read：  类型：Boolean  默认：true 设置false，将不执行读取文件操作，返回null；")]),s._v(" "),n("p",[s._v("(3) options.base：  类型：String  设置输出路径以某个路径的某个组成部分为基础向后拼接，具体看下面示例：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("  gulp.src('client/js/**/*.js') \n    .pipe(minify())\n    .pipe(gulp.dest('build'));  // Writes 'build/somedir/somefile.js'\n   \n  gulp.src('client/js/**/*.js', { base: 'client' })\n    .pipe(minify())\n    .pipe(gulp.dest('build'));  // Writes 'build/js/somedir/somefile.js'\n")])])])])]),s._v(" "),n("ol",[n("li",[n("p",[n("strong",[s._v("gulp.dest(path[, options])")])]),s._v(" "),n("p",[s._v("2.1、说明：dest方法是指定处理完后文件输出的路径；")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v(" gulp.src('./client/templates/*.jade')\n   .pipe(jade())\n   .pipe(gulp.dest('./build/templates'))\n   .pipe(minify())\n   .pipe(gulp.dest('./build/minified_templates'));\n")])])]),n("p",[s._v("2.2、path：  类型(必填)：String or Function 指定文件输出路径，或者定义函数返回文件输出路径亦可；")]),s._v(" "),n("p",[s._v("2.3、options：  类型(可选)：Object，有2个属性cwd、mode；")]),s._v(" "),n("p",[s._v("options.cwd：  类型：String  默认：process.cwd()：前脚本的工作目录的路径 当文件输出路径为相对路径将会用到；")]),s._v(" "),n("p",[s._v("options.mode：  类型：String  默认：0777 指定被创建文件夹的权限；")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("gulp.task(name[, deps], fn)")])]),s._v(" "),n("p",[s._v("3.1、说明：task定义一个gulp任务；")]),s._v(" "),n("p",[s._v("3.2、name：  类型(必填)：String 指定任务的名称（不应该有空格）；")]),s._v(" "),n("p",[s._v("3.3、deps：  类型(可选)：StringArray，该任务依赖的任务（注意：被依赖的任务需要返回当前任务的事件流，请参看下面示例）；")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v(" gulp.task('testLess', function () {\n     return gulp.src(['less/style.less'])\n         .pipe(less())\n         .pipe(gulp.dest('./css'));\n });\n  \n gulp.task('minicss', ['testLess'], function () { //执行完testLess任务后再执行minicss任务\n     gulp.src(['css/*.css'])\n         .pipe(minifyCss())\n         .pipe(gulp.dest('./dist/css'));\n });\n")])])]),n("p",[s._v("3.4、fn：  类型(必填)：Function 该任务调用的插件操作；")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])")])]),s._v(" "),n("p",[s._v("4.1、说明：watch方法是用于监听文件变化，文件一修改就会执行指定的任务；")]),s._v(" "),n("p",[s._v("4.2、glob：  需要处理的源文件匹配符路径。类型(必填)：String or StringArray；")]),s._v(" "),n("p",[s._v("4.3、opts：  类型(可选)：Object 具体参看https://github.com/shama/gaze；")]),s._v(" "),n("p",[s._v("4.4、tasks：  类型(必填)：StringArray 需要执行的任务的名称数组；")]),s._v(" "),n("p",[s._v("4.5、cb(event)：  类型(可选)：Function 每个文件变化执行的回调函数；")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v(" gulp.task('watch1', function () {\n     gulp.watch('less/**/*.less', ['testLess']);\n });\n  \n gulp.task('watch2', function () {\n     gulp.watch('js/**/*.js', function (event) {\n         console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');\n     });\n });\t\n")])])])])]),s._v(" "),n("h1",{attrs:{id:"gulp相关插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gulp相关插件"}},[s._v("#")]),s._v(" gulp相关插件")]),s._v(" "),n("h3",{attrs:{id:"准备工作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[s._v("#")]),s._v(" 准备工作")]),s._v(" "),n("ul",[n("li",[s._v("npm init （创建项目的package.json文件）")]),s._v(" "),n("li",[s._v("npm install --global gulp  全局安装gulp")]),s._v(" "),n("li",[s._v("npm install --save-dev gulp  作为项目的开发依赖（devDependencies）安装")]),s._v(" "),n("li",[s._v("npm install (安装package.json中的插件)")])]),s._v(" "),n("blockquote",[n("p",[s._v("全局安装了gulp，项目也安装了gulp，全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能。")])]),s._v(" "),n("h2",{attrs:{id:"匹配符-、-、-、"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#匹配符-、-、-、"}},[s._v("#")]),s._v(" 匹配符  *、**、！、{}")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("gulp.src('./js/*.js')               // * 匹配js文件夹下所有.js格式的文件\ngulp.src('./js/**/*.js')            // ** 匹配js文件夹的0个或多个子文件夹\ngulp.src(src/*.{jpg,png,gif})       //匹配src下的所有jpg/png/gif文件)；\ngulp.src(['./js/*.js','!./js/index.js'])    // ! 匹配除了index.js之外的所有js文件\ngulp.src('./js/**/{omui,common}.js')        // 匹配包含omui.js和common.js的文件\n")])])]),n("h2",{attrs:{id:"插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#插件"}},[s._v("#")]),s._v(" 插件")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("安装单个插件：\n npm install –-save-dev gulp-uglify（或者简写为：npm i –D gulp-uglify）\n一次安装多个插件：\nnpm install gulp-minify-css gulp-concat gulp-uglify gulp-rename del --save-dev\n删除安装的插件：\nnpm uninstall gulp-uglify\n")])])]),n("ol",[n("li",[n("p",[s._v("Gulp-uglify  （js压缩）")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("var gulp = require('gulp'); //加载gulp\t\nvar uglify = require('gulp-uglify');//加载js压缩 \t\n\ngulp.src('./hello.js')\n    .pipe(uglify())                 // 直接压缩hello.js\n    .pipe(gulp.dest('./dist'))\n    \n gulp.src('./hello.js')\n    .pipe(uglify({\n        mangle: true,               // 是否修改变量名，默认为 true\n        compress: true,             // 是否完全压缩，默认为 true\n        preserveComments: 'all'     // 保留所有注释\n    }))\n    .pipe(gulp.dest('./dist'))\n\n\n// 定义一个任务 compass \t\ngulp.task('compass',function(){\t\n\tgulp.src(['js/*.js','!js/*.min.js'])//获取文件，同时过滤掉.min.js文件\t\n\t.pipe(uglify())\n\t.pipe(gulp.dest('javascript/')); //输出文件 \n}); \n")])])]),n("blockquote",[n("p",[s._v("说明：第二个参数'！js/*.min.js'是用来过滤掉后缀为min.js，！感叹号为排除模式")])])]),s._v(" "),n("li",[n("p",[s._v("gulp-clean-css（CSS压缩） gulp-minify-css（已经弃用）")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("var gulp = require('gulp');\t\nvar cleanCss = require('gulp-clean-css');\t\ngulp.task('cssmini', function () {\t\n\tgulp.src(['css/*.css', '!css/*.min.css'])  //要压缩的css\t\n   \t.pipe(cleanCss())\t\n   \t.pipe(gulp.dest('buildcss/'));\t\n});\n\nvar gulp = require('gulp');\t\nvar minify = require('gulp-minify-css');\t\ngulp.task('cssmini', function () {\t\n\tgulp.src(['css/*.css', '!css/*.min.css'])  //要压缩的css\t\n   \t.pipe(minify())\t\n   \t.pipe(gulp.dest('buildcss/'));\t\n});\n")])])])]),s._v(" "),n("li",[n("p",[s._v("gulp-concat（文件合并）合并CSS与JS文件，减少http请求。")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("var gulp = require('gulp');\t\nvar concat = require(\"gulp-concat\");\n\ngulp.src('./js/*.js')\n    .pipe(concat('all.js'))         // 合并js文件夹下的所用的.js文件，并命名为all.js文件\n    .pipe(gulp.dest('./dist'));\n    \ngulp.src(['./js/demo1.js','./js/demo2.js','./js/demo2.js'])\n    .pipe(concat('all.js'))         // 按照[]里的顺序合并文件\n    .pipe(gulp.dest('./dist'));\n")])])])]),s._v(" "),n("li",[n("p",[s._v("gulp-less（编译Less） 把less文件转换为css，gulp-sass一样的用法（把scss文件转换为sass文件。）")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("var gulp = require('gulp'),\n    less = require(\"gulp-less\");\ngulp.task('compile-less', function () {\n    gulp.src('less/*.less')\n    .pipe(less())\n    .pipe(gulp.dest('dist/css'));\n\n});\n")])])])]),s._v(" "),n("li",[n("p",[s._v("gulp-imagemin（压缩图片）可以使用gulp-imagemin的插件来压缩jpg、png、gif等图片")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("var gulp = require('gulp');\nvar imagemin = require('gulp-imagemin');\nvar pngquant = require('imagemin-pngquant'); //png图片压缩插件\n\ngulp.task('default', function () {\n    return gulp.src('src/images/*')\n        .pipe(imagemin({\n            progressive: true,\n            use: [pngquant()] //使用pngquant来压缩png图片\n        }))\n        .pipe(gulp.dest('dist'));\n});\n")])])]),n("blockquote",[n("p",[s._v("说明：gulp-imagemin的使用比较复杂一点，它本身也有很多插件（更多imagemin插件），这里只是简单介绍一下，要想压缩不同格式的图片，必须对应安装不同的插件，这里只安装了pngquant插件。按照nodejs的模块化思想，每个require只包含一个功能，这样就可以达到按需加载的目的。")])])]),s._v(" "),n("li",[n("p",[s._v("gulp-livereload（自动刷新）")]),s._v(" "),n("p",[s._v("当代码变化时，它可以帮助我们自动刷新页面，该插件最好配合谷歌浏览器，且要安装livereload chrome extension扩展插件，否则无效。")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("var gulp = require('gulp'),\n    less = require('gulp-less'),\n    livereload = require('gulp-livereload');\n\ngulp.task('less', function() {\n  gulp.src('less/*.less')\n    .pipe(less())\n    .pipe(gulp.dest('css'))\n    .pipe(livereload());\n});\n\ngulp.task('watch', function() {\n  livereload.listen(); //要在这里调用listen()方法\n  gulp.watch('less/*.less', ['less']);  //监听目录下的文件，若文件发生变化，则调用less任务。\n});\n")])])])]),s._v(" "),n("li",[n("p",[s._v("gulp-connect（启本地服务，同时可以自动刷新）")]),s._v(" "),n("p",[s._v("实现原理：通过在本地开启一个websocket服务，检测文件变化，当文件被修改后触发livereload任务，推送消息给浏览器刷新页面。")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("var gulp = require('gulp'),\n    connect = require('gulp-connect');//本地服务\t\n\n//本地服务配置\nvar serverConfig={\n    root:'./dest/views',//项目的根目录\n    livereload: true,\n    port:8080\n};\n\n//创建任务\ngulp.task('server', function() {\n    connect.server(serverConfig);\n});\n")])])]),n("blockquote",[n("p",[s._v("或者使用nodeJS的serve")]),s._v(" "),n("p",[s._v("安装：npm install serve -g")]),s._v(" "),n("p",[s._v("启动：serve .")])]),s._v(" "),n("blockquote",[n("p",[s._v("说明：")]),s._v(" "),n("p",[s._v("1.gulp启动任务后，可以看到终端显示在8080端口开启了一个http服务，而在****端口开启了LiveReload服务，实际为一个WebSocket服务。")]),s._v(" "),n("p",[s._v("2.打开页面，可以看到原始页面中插入了livereload的js文件。")]),s._v(" "),n("p",[s._v("3.在network中WS下可以看到WebSocket的消息。")]),s._v(" "),n("p",[s._v("4.当编辑代码发生变化时（Ctrl＋S保存后），浏览器会收到消息，触发F5刷新页面的操作。")])])]),s._v(" "),n("li",[n("p",[s._v("gulp-zip （ZIP压缩文件）")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("var zip = require('gulp-zip');\n\ngulp.src('./src/*')\n    .pipe(zip('all.zip'))                   // 压缩成all.zip文件\n    .pipe(gulp.dest('./dist'))\n")])])])]),s._v(" "),n("li",[n("p",[s._v("gulp-autoprefixer （自动为css添加浏览器前缀）")]),s._v(" "),n("p",[s._v("使用gulp-autoprefixer根据设置浏览器版本自动处理浏览器前缀。使用她我们可以很潇洒地写代码，不必考虑各浏览器兼容前缀。【特别是开发移动端页面时，就能充分体现它的优势。例如兼容性不太好的flex布局。】")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("var autoprefixer = require('gulp-autoprefixer');\n\ngulp.src('./css/*.css')\n    .pipe(autoprefixer())                   // 直接添加前缀\n    .pipe(gulp.dest('dist'))\n\ngulp.src('./css/*.css')\n    .pipe(autoprefixer({\n        browsers: ['last 2 versions'],      // 浏览器版本\n        cascade：true                       // 美化属性，默认true\n        add: true                           // 是否添加前缀，默认true\n        remove: true                        // 删除过时前缀，默认true\n        flexbox: true                       // 为flexbox属性添加前缀，默认true\n    }))\n    .pipe(gulp.dest('./dist'))\n")])])]),n("blockquote",[n("p",[s._v("说明: "),n("a",{attrs:{href:"http://www.ydcss.com/archives/94",target:"_blank",rel:"noopener noreferrer"}},[s._v("案例"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("配置项 browsers 参考 "),n("a",{attrs:{href:"http://browserl.ist/",target:"_blank",rel:"noopener noreferrer"}},[s._v("浏览器列表"),n("OutboundLink")],1)])])]),s._v(" "),n("li",[n("p",[s._v("gulp-sequence/run-sequence （解决task任务的同步执行）")]),s._v(" "),n("p",[s._v("gulp的任务task都是异步执行的，如官方文档所述：默认的，task 将以最大的并发数执行，也就是说，gulp 会一次性运行所有的 task 并且不做任何等待，那么假如我们需要同步的话应该怎么做，官方文档也有提及，下面我们使用插件来实现")]),s._v(" "),n("p",[s._v("例如：进行一个工程的样式文件进行发布，先对scss进行编译，然后对里面的图片合并为雪碧图，最后在对处理好的css进行合并压缩。")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("编译scss的任务\ngulp.task( 'spriteScss', function( cb ) {\n    var src = [];\n    src.push( cssSrc + \"home/\" + projectModule + '/**/*.scss' );\n\n    return gulp.src( src )\n        .pipe( sass().on( 'error', sass.logError ) )\n        .pipe( gulp.dest( 'spriteScss' ) );\n} );\n\n合并样式文件\ngulp.task( 'spriteCss', function( cb ) {\n    var src = [];\n    src.push( 'spriteScss/**/*.css' );\n    //- 创建一个名为 concat 的 task\n    return gulp.src( src )\n        //- 合并后的文件名\n        .pipe( concat( projectModule + '.css' ) )\n        .pipe( replace( /\\(images\\//g, '(../spriteImg/' ) )\n        //- 输出文件本地\n        .pipe( gulp.dest( 'spriteCss' ) );\n} );\n\n生成雪碧图\ngulp.task( 'spriteDest', function( cb ) {\n    return gulp.src( 'spriteCss/' + projectModule + '.css' )\n        .pipe( cssSprite( {\n            // sprite背景图源文件夹，只有匹配此路径才会处理\n            imagepath: 'spriteImg/',\n            // 映射CSS中背景路径，支持函数和数组，默认为 null\n            imagepath_map: null,\n            // 雪碧图输出目录，注意，会覆盖之前文件！默认 images/\n            spritedest: 'spriteImg/',\n            // 替换后的背景路径，默认 ../images/\n            spritepath: '../images/' + projectModule + '/',\n            // 各图片间间距，如果设置为奇数，会强制+1以保证生成的2x图片为偶数宽高，默认 0\n            padding: 2,\n            // 是否使用 image-set 作为2x图片实现，默认不使用\n            useimageset: false,\n            // 是否以时间戳为文件名生成新的雪碧图文件，如果启用请注意清理之前生成的文件，默认不生成新文件\n            newsprite: mode === \"release\", //判断是否发布模式，是就建以时间戳为文件名的文件，否则不建。\n            // 给雪碧图追加时间戳，默认不追加\n            spritestamp: false,\n            // 在CSS文件末尾追加时间戳，默认不追加\n            cssstamp: false\n        } ) )\n        .pipe( gulp.dest( 'spriteDest/' ) );\n} );\n\n使用控件gulp-sequence\ngulp.task( 'css', gulpSequence( 'spriteScss', 'spriteCss', 'spriteDest', function() {\n    console.log( \"输出完成！\" );\n} ) );\n")])])])]),s._v(" "),n("li",[n("p",[s._v("gulp-htmlmin（压缩html）")]),s._v(" "),n("p",[s._v("压缩html中的css，js")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("var gulp = require('gulp');\nvar htmlmin = require('gulp-htmlmin');\n\ngulp.task('minify', function() {\n    gulp.src('src/*.html')\n        .pipe(htmlmin({collapseWhitespace: true}))\n        .pipe(gulp.dest('dist'));\n});\n")])])])]),s._v(" "),n("li",[n("p",[s._v("gulp-clean（删除文件或文件夹）")]),s._v(" "),n("p",[s._v("当你需要清空缓存文件夹时，或由于某个目的需要清除一些文件时，可以用gulp-clean。")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("var gulp = require('gulp');\nvar clean = require('gulp-clean');\n\ngulp.task('default', function () {\n    gulp.src('app/tmp', {read: false})\n        .pipe(clean());\n});\n")])])])]),s._v(" "),n("li",[n("p",[s._v("复制第三方插件（不需要插件）")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("//复制第三方插件\ngulp.task('copy',function () {\n    gulp.src(src_plugins+'/**/*')\n        .pipe(gulp.dest(dest_plugins))\n});\n")])])])])])])}),[],!1,null,null,null);e.default=l.exports}}]);