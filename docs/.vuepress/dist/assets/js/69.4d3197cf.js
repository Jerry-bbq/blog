(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{523:function(t,s,r){"use strict";r.r(s);var v=r(26),e=Object(v.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"前端工程化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前端工程化"}},[t._v("#")]),t._v(" 前端工程化")]),t._v(" "),r("p",[t._v("前端工程化可以分为四个方面："),r("strong",[t._v("模块化")]),t._v("、"),r("strong",[t._v("组件化")]),t._v("、"),r("strong",[t._v("规划化")]),t._v("、"),r("strong",[t._v("自动化")])]),t._v(" "),r("h2",{attrs:{id:"模块化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[t._v("#")]),t._v(" 模块化")]),t._v(" "),r("p",[t._v("将独立的功能代码封装成一个独立的文件，其他模块需要使用，在进行引用。模块化有利于代码的拆分和架构上的解耦")]),t._v(" "),r("ul",[r("li",[t._v("JS 模块化：CommonJS、AMD、CMD 以及 ES6 Module。")]),t._v(" "),r("li",[t._v("CSS 模块化：Sass、Less、Stylus、BEM、CSS Modules 等。其中预处理器和 BEM 都会有的一个问题就是样式覆盖。而 CSS Modules 则是通过 JS 来管理依赖，最大化的结合了 JS 模块化和 CSS 生态，比如 Vue 中的 style scoped。")]),t._v(" "),r("li",[t._v("资源模块化：任何资源都能以模块的形式进行加载，目前大部分项目中的文件、CSS、图片等都能直接通过 JS 做统一的依赖关系处理。")])]),t._v(" "),r("h3",{attrs:{id:"commonjs规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#commonjs规范"}},[t._v("#")]),t._v(" commonjs规范")]),t._v(" "),r("p",[t._v("commonjs 规范应用于 nodejs 应用中，在 nodejs 应用中每个文件就是一个模块，拥有自己的作用域，文件中的变量、函数都是私有的，与其他文件相隔离")]),t._v(" "),r("p",[t._v("CommonJS规范规定，每个模块内部， module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即 module.exports ）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性")]),t._v(" "),r("h3",{attrs:{id:"module-exports"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#module-exports"}},[t._v("#")]),t._v(" module.exports")]),t._v(" "),r("h3",{attrs:{id:"require"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#require"}},[t._v("#")]),t._v(" require")]),t._v(" "),r("h3",{attrs:{id:"隔离性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#隔离性"}},[t._v("#")]),t._v(" 隔离性")]),t._v(" "),r("p",[t._v("commonjs 规范是在运行时加载的，在运行时导出对象，导出的对象与原本模块中的对象是隔离的，简单的说就是克隆了一份，commonjs 规范下模块的导出是深克隆的。")]),t._v(" "),r("h3",{attrs:{id:"es6-模块化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块化"}},[t._v("#")]),t._v(" ES6 模块化")]),t._v(" "),r("p",[t._v("ECMA推出了官方标准的模块化解决方案，使用 export 导出，import 导入，编码简洁，从语义上更加通俗易懂。")]),t._v(" "),r("p",[t._v("ES6 支持异步加载模块 的模块不是对象，而是在编译的时候就完成模块的引用，所以是编译时才加载")]),t._v(" "),r("h3",{attrs:{id:"es6-模块规范和-commonjs-规范-运行机制的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块规范和-commonjs-规范-运行机制的区别"}},[t._v("#")]),t._v(" ES6 模块规范和 commonjs 规范 运行机制的区别")]),t._v(" "),r("p",[t._v("CommonJS 模块是运行时加载，ES6 模块是编译时输出接口")]),t._v(" "),r("ul",[r("li",[t._v("运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。")]),t._v(" "),r("li",[t._v("编译时加载: ES6 模块不是对象，而是通过 export 命令显式指定输出的代码，import时采用静态命令的形式。即在import时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。")])]),t._v(" "),r("p",[t._v("CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。")]),t._v(" "),r("h2",{attrs:{id:"组件化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[t._v("#")]),t._v(" 组件化")]),t._v(" "),r("p",[t._v("不同于模块化，模块化是对文件、对代码和资源拆分，而"),r("strong",[t._v("组件化则是对 UI 层面的拆分")])]),t._v(" "),r("p",[t._v("通常，我们会需要对页面进行拆分，将其拆分成一个一个的零件，然后分别去实现这一个个零件，最后再进行组装。\n在我们的实际业务开发中，对于组件的拆分我们需要做不同程度的考量，其中主要包括细粒度和通用性这两块的考虑。\n对于业务组件，你更多需要考量的是针对你负责业务线的一个适用度，即你设计的业务组件是否成为你当前业务的 “通用” 组件。")]),t._v(" "),r("h2",{attrs:{id:"规划化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规划化"}},[t._v("#")]),t._v(" 规划化")]),t._v(" "),r("p",[t._v("正所谓无规矩不成方圆，一些好的规范则能很好的帮助我们对项目进行良好的开发管理。规范化指的是我们在工程开发初期以及开发期间制定的系列规范，其中又包含了")]),t._v(" "),r("ul",[r("li",[t._v("项目目录结构")]),t._v(" "),r("li",[t._v("编码规范：对于编码这块的约束，一般我们都会采用一些强制措施，比如 ESLint、StyleLint 等。")]),t._v(" "),r("li",[t._v("联调规范")]),t._v(" "),r("li",[t._v("文件命名规范")]),t._v(" "),r("li",[t._v("样式管理规范：目前流行的样式管理有 BEM、Sass、Less、Stylus、CSS Modules 等方式。")]),t._v(" "),r("li",[t._v("git flow 工作流：其中包含分支命名规范、代码合并规范等。")]),t._v(" "),r("li",[t._v("定期 code review… 等等")])]),t._v(" "),r("h2",{attrs:{id:"自动化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自动化"}},[t._v("#")]),t._v(" 自动化")]),t._v(" "),r("p",[t._v("从最早先的 grunt、gulp 等，再到目前的 webpack、parcel。这些自动化工具在自动化合并、构建、打包都能为我们节省很多工作。而这些只是前端自动化其中的一部分，前端自动化还包含了持续集成、自动化测试等方方面面。")])])}),[],!1,null,null,null);s.default=e.exports}}]);