(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{519:function(t,s,r){"use strict";r.r(s);var e=r(26),o=Object(e.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"前端模块化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前端模块化"}},[t._v("#")]),t._v(" 前端模块化")]),t._v(" "),r("h2",{attrs:{id:"什么是前端模块化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是前端模块化"}},[t._v("#")]),t._v(" 什么是前端模块化")]),t._v(" "),r("p",[t._v("将独立的功能代码封装成一个独立的文件，其他模块需要使用，在进行引用。模块化有利于代码的拆分和架构上的解耦")]),t._v(" "),r("h2",{attrs:{id:"commonjs规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#commonjs规范"}},[t._v("#")]),t._v(" commonjs规范")]),t._v(" "),r("p",[t._v("commonjs 规范应用于 nodejs 应用中，在 nodejs 应用中每个文件就是一个模块，拥有自己的作用域，文件中的变量、函数都是私有的，与其他文件相隔离")]),t._v(" "),r("p",[t._v("CommonJS规范规定，每个模块内部， module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即 module.exports ）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性")]),t._v(" "),r("h3",{attrs:{id:"module-exports"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#module-exports"}},[t._v("#")]),t._v(" module.exports")]),t._v(" "),r("h3",{attrs:{id:"require"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#require"}},[t._v("#")]),t._v(" require")]),t._v(" "),r("h3",{attrs:{id:"隔离性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#隔离性"}},[t._v("#")]),t._v(" 隔离性")]),t._v(" "),r("p",[t._v("commonjs 规范是在运行时加载的，在运行时导出对象，导出的对象与原本模块中的对象是隔离的，简单的说就是克隆了一份，commonjs 规范下模块的导出是深克隆的。")]),t._v(" "),r("h2",{attrs:{id:"es6-模块化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块化"}},[t._v("#")]),t._v(" ES6 模块化")]),t._v(" "),r("p",[t._v("ECMA推出了官方标准的模块化解决方案，使用 export 导出，import 导入，编码简洁，从语义上更加通俗易懂。")]),t._v(" "),r("p",[t._v("ES6 支持异步加载模块 的模块不是对象，而是在编译的时候就完成模块的引用，所以是编译时才加载")]),t._v(" "),r("h2",{attrs:{id:"es6-模块规范和-commonjs-规范-运行机制的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块规范和-commonjs-规范-运行机制的区别"}},[t._v("#")]),t._v(" ES6 模块规范和 commonjs 规范 运行机制的区别")]),t._v(" "),r("p",[t._v("CommonJS 模块是运行时加载，ES6 模块是编译时输出接口")]),t._v(" "),r("ul",[r("li",[t._v("运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。")]),t._v(" "),r("li",[t._v("编译时加载: ES6 模块不是对象，而是通过 export 命令显式指定输出的代码，import时采用静态命令的形式。即在import时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。")])]),t._v(" "),r("p",[t._v("CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。")])])}),[],!1,null,null,null);s.default=o.exports}}]);