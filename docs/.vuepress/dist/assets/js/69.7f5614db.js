(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{474:function(t,v,_){"use strict";_.r(v);var e=_(26),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),_("h2",{attrs:{id:"http报文的组成部分"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http报文的组成部分"}},[t._v("#")]),t._v(" HTTP报文的组成部分")]),t._v(" "),_("h3",{attrs:{id:"请求报文-request-headers"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求报文-request-headers"}},[t._v("#")]),t._v(" 请求报文（Request Headers）：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("分类")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("请求行")]),t._v(" "),_("td",[t._v("GET / HTTP/1.1")])]),t._v(" "),_("tr",[_("td",[t._v("请求头")]),t._v(" "),_("td",[t._v("Host：www.imooc.com...（一系列的key-value值）")])]),t._v(" "),_("tr",[_("td",[t._v("空行")]),t._v(" "),_("td",[t._v("用来告诉服务器，下面的是请求体")])]),t._v(" "),_("tr",[_("td",[t._v("请求体")]),t._v(" "),_("td",[t._v("数据部分")])])])]),t._v(" "),_("h3",{attrs:{id:"响应报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应报文"}},[t._v("#")]),t._v(" 响应报文：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("分类")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("状态行")]),t._v(" "),_("td",[t._v("HTTP/1.1 200 OK")])]),t._v(" "),_("tr",[_("td",[t._v("响应头")]),t._v(" "),_("td",[t._v("Server: ngix...（一系列的key-value值）")])]),t._v(" "),_("tr",[_("td",[t._v("空行")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("响应体")]),t._v(" "),_("td")])])]),t._v(" "),_("h2",{attrs:{id:"http请求的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http请求的方法"}},[t._v("#")]),t._v(" HTTP请求的方法")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("GET")]),t._v(" "),_("td",[t._v("获取资源")])]),t._v(" "),_("tr",[_("td",[t._v("POST")]),t._v(" "),_("td",[t._v("传输资源")])]),t._v(" "),_("tr",[_("td",[t._v("HEAD")]),t._v(" "),_("td",[t._v("获取报文首部")])]),t._v(" "),_("tr",[_("td",[t._v("PUT")]),t._v(" "),_("td",[t._v("更新资源")])]),t._v(" "),_("tr",[_("td",[t._v("DELETE")]),t._v(" "),_("td",[t._v("删除资源")])]),t._v(" "),_("tr",[_("td",[t._v("CONNECT")]),t._v(" "),_("td",[t._v("HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器")])]),t._v(" "),_("tr",[_("td",[t._v("OPTIONS")]),t._v(" "),_("td",[t._v("用于获取目的资源所支持的通信选项")])]),t._v(" "),_("tr",[_("td",[t._v("TRACE")]),t._v(" "),_("td",[t._v("回显服务器收到的请求，主要用于测试或诊断")])]),t._v(" "),_("tr",[_("td",[t._v("PATCH")]),t._v(" "),_("td",[t._v("是对 PUT 方法的补充，用来对已知资源进行局部更新")])])])]),t._v(" "),_("h2",{attrs:{id:"post个get的区别-记住三到四个"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#post个get的区别-记住三到四个"}},[t._v("#")]),t._v(" POST个GET的区别（记住三到四个）")]),t._v(" "),_("ul",[_("li",[t._v("[x] GET参数通过URL传递，POST放在Request body中")]),t._v(" "),_("li",[t._v("[x] GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会保留")]),t._v(" "),_("li",[t._v("[x] GET请求在URL中传送的参数是有长度限制的，而POST没有限制")]),t._v(" "),_("li",[t._v("[x] GET在浏览器回退时是无害的，而POST会再次请求")]),t._v(" "),_("li",[t._v("[x] GET请求会被浏览器主动缓存，而POST不会，除非手动设置")]),t._v(" "),_("li",[t._v("GET产生的URL地址可以被隐藏，而POST不可以")]),t._v(" "),_("li",[t._v("GET请求只能进行url编码，而POST支持多种编码方式")]),t._v(" "),_("li",[t._v("对于参数的数据类型，GET只接受ASCII字符，而POST没有限制")]),t._v(" "),_("li",[t._v("GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息")])]),t._v(" "),_("h2",{attrs:{id:"http状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" HTTP状态码")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("状态码")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("1xx")]),t._v(" "),_("td",[t._v("指示信息 - 表示请求已接收，继续处理")])]),t._v(" "),_("tr",[_("td",[t._v("2xx")]),t._v(" "),_("td",[t._v("成功 - 表示请求已被成功接收")])]),t._v(" "),_("tr",[_("td",[t._v("3xx")]),t._v(" "),_("td",[t._v("重定向 - 要完成请求必须进行更进一步的操作")])]),t._v(" "),_("tr",[_("td",[t._v("4xx")]),t._v(" "),_("td",[t._v("客户端错误 - 请求有语法错误或者请求无法实现")])]),t._v(" "),_("tr",[_("td",[t._v("5xx")]),t._v(" "),_("td",[t._v("服务器错误 - 服务器未能实现合法的请求")])])])]),t._v(" "),_("ul",[_("li",[t._v("200 OK：客户端请求成功")]),t._v(" "),_("li",[t._v("206 Partial Content：客户端发送了一个带有Range头的GET请求，服务端完成了它(比如音频文件太大)")]),t._v(" "),_("li",[t._v("301 Moved Permanently：所请求的页面已经转移至新的url")]),t._v(" "),_("li",[t._v("302 Found：所请求的页面已经临时转移至新的url")]),t._v(" "),_("li",[t._v("304 Not Modified：客户端有缓存的文档并发出了一个条件性的请求，服务端告诉客户端原来缓存的文档还可以继续使用")]),t._v(" "),_("li",[t._v("400 Bad Request：客户端请求有语法错误，不能被服务器所理解")]),t._v(" "),_("li",[t._v("401 Unauthorized：请求未经授权，这个状态码必须和WWW-Authenticate报头域一起使用")]),t._v(" "),_("li",[t._v("403 Forbidden：对被请求页面的访问被禁止")]),t._v(" "),_("li",[t._v("404 Not Found：请求资源不存在")]),t._v(" "),_("li",[t._v("500 Internal Server Error：服务器发生了不可预期的错误原来缓冲的文档可以继续使用")]),t._v(" "),_("li",[t._v("503 Service Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可恢复正常")])]),t._v(" "),_("h2",{attrs:{id:"http的缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http的缓存"}},[t._v("#")]),t._v(" HTTP的缓存")]),t._v(" "),_("p",[t._v("http缓存机制主要在http响应头中设定，响应头中相关字段为"),_("code",[t._v("Expires")]),t._v("、"),_("code",[t._v("Cache-Control")]),t._v("、"),_("code",[t._v("Last-Modified")]),t._v("、"),_("code",[t._v("Etag")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"强缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),_("p",[t._v("浏览器不会像服务器发送任何请求，直接从本地缓存中读取文件并返回Status Code: 200 OK")]),t._v(" "),_("p",[t._v("强缓存的header参数：")]),t._v(" "),_("ul",[_("li",[t._v("Expires：过期时间，如果设置了时间，则浏览器会在设置的时间内直接读取缓存，不再请求")]),t._v(" "),_("li",[t._v("Cache-Control：当值设为max-age=300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。")])]),t._v(" "),_("p",[t._v("cache-control：除了该字段外，还有下面几个比较常用的设置值：")]),t._v(" "),_("ul",[_("li",[t._v("max-age：用来设置资源（representations）可以被缓存多长时间，单位为秒")]),t._v(" "),_("li",[t._v("s-maxage：和max-age是一样的，不过它只针对代理服务器缓存而言；")]),t._v(" "),_("li",[t._v("public：指示响应可被任何缓存区缓存；")]),t._v(" "),_("li",[t._v("private：只能针对个人用户，而不能被代理服务器缓存；")]),t._v(" "),_("li",[t._v("no-cache：强制客户端直接向服务器发送请求,也就是说每次请求都必须向服务器发送。服务器接收到     请求，然后判断资源是否变更，是则返回新内容，否则返回304，未变更。这个很容易让人产生误解，使人误     以为是响应不被缓存。实际上Cache-Control:     no-cache是会被缓存的，只不过每次在向客户端（浏览器）提供响应数据时，缓存都要向服务器评估缓存响应的有效性。")]),t._v(" "),_("li",[t._v("no-store：禁止一切缓存（这个才是响应不被缓存的意思）")])]),t._v(" "),_("p",[t._v("cache-control是http1.1的头字段，expires是http1.0的头字段,如果expires和cache-control同时存在，cache-control会覆盖expires，建议两个都写。")]),t._v(" "),_("h3",{attrs:{id:"协商缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),_("p",[t._v("向服务器发送请求，服务器会根据这个请求的request header的一些参数来判断是否命中协商缓存，如果命中，则返回304状态码并带上新的response header通知浏览器从缓存中读取资源；")]),t._v(" "),_("p",[t._v("协商缓存的header参数：")]),t._v(" "),_("p",[t._v("Last-Modifed/If-Modified-Since和Etag/If-None-Match是分别成对出现的，呈一一对应关系")]),t._v(" "),_("p",[t._v("Etag/If-None-Match：")]),t._v(" "),_("p",[t._v("Etag：")]),t._v(" "),_("p",[t._v("Etag是属于HTTP 1.1属性，它是由服务器（Apache或者其他工具）生成返回给前端，用来帮助服务器控制Web端的缓存验证。\nApache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。")]),t._v(" "),_("p",[t._v("If-None-Match：")]),t._v(" "),_("p",[t._v("当资源过期时，浏览器发现响应头里有Etag,则再次像服务器请求时带上请求头if-none-match(值是Etag的值)。服务器收到请求进行比对，决定返回200或304")]),t._v(" "),_("p",[t._v("Last-Modifed/If-Modified-Since：")]),t._v(" "),_("p",[t._v("Last-Modified：")]),t._v(" "),_("p",[t._v("浏览器向服务器发送资源最后的修改时间")]),t._v(" "),_("p",[t._v("If-Modified-Since：")]),t._v(" "),_("p",[t._v("当资源过期时（浏览器判断Cache-Control标识的max-age过期），发现响应头具有Last-Modified声明，则再次向服务器请求时带上头if-modified-since，表示请求时间。服务器收到请求后发现有if-modified-since则与被请求资源的最后修改时间进行对比（Last-Modified）,若最后修改时间较新（大），说明资源又被改过，则返回最新资源，HTTP 200 OK;若最后修改时间较旧（小），说明资源无新修改，响应HTTP 304 走缓存。")]),t._v(" "),_("ul",[_("li",[t._v("Last-Modifed/If-Modified-Since的时间精度是秒，而Etag可以更精确。")]),t._v(" "),_("li",[t._v("Etag优先级是高于Last-Modifed的，所以服务器会优先验证Etag")]),t._v(" "),_("li",[t._v("Last-Modifed/If-Modified-Since是http1.0的头字段")])]),t._v(" "),_("h2",{attrs:{id:"什么是持久连接-每个连接可以处理多个请求-响应事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是持久连接-每个连接可以处理多个请求-响应事务"}},[t._v("#")]),t._v(" 什么是持久连接：每个连接可以处理多个请求-响应事务")]),t._v(" "),_("p",[t._v("HTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive模式时，每个请求/应答客户端和服务器都要建立一个连接，完成之后立即端口连接（HTTP协议为无连接的协议）")]),t._v(" "),_("p",[t._v("当使用Keep-Alive模式（又称持久连接、连接重用）时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接（HTTP/1.0不支持，HTTP/1.1支持）")]),t._v(" "),_("h2",{attrs:{id:"什么是管线化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是管线化"}},[t._v("#")]),t._v(" 什么是管线化")]),t._v(" "),_("p",[t._v("通常，http请求总是顺序发送的，下一个请求只有在当前请求的响应被完全接受的时候才会被发送，在使用持久连接的情况下，某个连接上消息的传递类似于：请求1->响应1->请求2->响应2->请求3->响应3")]),t._v(" "),_("p",[t._v("HTTP/1.1允许多个http请求通过一个套接字同时被输出 ，而不用等待相应的响应。某个连接上的消息变成了类似这种样子：请求1->请求2->请求3->响应1->响应2->响应3")]),t._v(" "),_("p",[t._v("特点：")]),t._v(" "),_("p",[t._v("管线化机制通过持久连接完成，仅HTTP/1.1支持此技术")]),t._v(" "),_("p",[t._v("只有GET和HEAD请求可以进行管线化，而POST有所限制")]),t._v(" "),_("p",[t._v("创建连接时不应启动管线化机制，因为服务器不一定支持HTTP/1.1版本的协议")]),t._v(" "),_("h2",{attrs:{id:"http和https的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http和https的区别"}},[t._v("#")]),t._v(" http和https的区别")]),t._v(" "),_("p",[t._v("概念：")]),t._v(" "),_("ul",[_("li",[t._v("HTTP：超文本传输协议（HyperText Transfer Protocol）")]),t._v(" "),_("li",[t._v("HTTPS：超文本传输安全协议（Hypertext Transfer Protocol Secure）HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性")])]),t._v(" "),_("p",[t._v("http的缺点：")]),t._v(" "),_("ul",[_("li",[t._v("http协议的所有传输内容都是明文，即便是自己加密了，但是加密的内容也依旧是明文，这就避免不了被窃听！")]),t._v(" "),_("li",[t._v("http协议传输的过程中没有身份验证这一说，这样就不免半路杀出一个不明身份就行身份冒充！")]),t._v(" "),_("li",[t._v("http协议传输的过程中也并没有进行数据完整性的校验，不免有些人在中途进行内容篡改！")])]),t._v(" "),_("p",[t._v("区别：")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。")])]),t._v(" "),_("li",[_("p",[t._v("http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。")])]),t._v(" "),_("li",[_("p",[t._v("http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。")])]),t._v(" "),_("li",[_("p",[t._v("http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。")])])]),t._v(" "),_("h2",{attrs:{id:"tcp三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手"}},[t._v("#")]),t._v(" TCP三次握手")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.im/post/6880781683553992712",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),_("OutboundLink")],1)]),t._v(" "),_("p",[t._v("一、三次握手\n三次握手（Three-way Handshake）其实就是指建立一个 TCP 连接时，需要客户端和服务器总共发送 3 个包。")]),t._v(" "),_("p",[t._v("主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。")]),t._v(" "),_("p",[t._v("过程如下：")]),t._v(" "),_("ul",[_("li",[t._v("第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN(c)，此时客户端处于 SYN_SENT 状态")]),t._v(" "),_("li",[t._v("第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，为了确认客户端的 SYN，将客户端的 ISN+1 作为 ACK 的值，此时服务器处于 SYN_RCVD 的状态")]),t._v(" "),_("li",[t._v("第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，值为服务器的 ISN+1。此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。")])]),t._v(" "),_("p",[t._v("上述每一次握手的作用如下：")]),t._v(" "),_("ul",[_("li",[t._v("第一次握手：客户端发送网络包，服务端收到了 这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。")]),t._v(" "),_("li",[t._v("第二次握手：服务端发包，客户端收到了 这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常")]),t._v(" "),_("li",[t._v("第三次握手：客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常")])]),t._v(" "),_("p",[t._v("通过三次握手，就能确定双方的接收和发送能力是正常的。之后就可以正常通信了")]),t._v(" "),_("h2",{attrs:{id:"为什么不是两次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是两次握手"}},[t._v("#")]),t._v(" 为什么不是两次握手?")]),t._v(" "),_("p",[t._v("如果是两次握手，发送端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到，但接收端只能确定对方发的包自己能收到 无法确定自己发的包对方能收到")]),t._v(" "),_("p",[t._v("并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源")]),t._v(" "),_("h2",{attrs:{id:"tcp四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp四次挥手"}},[t._v("#")]),t._v(" TCP四次挥手")]),t._v(" "),_("p",[t._v("tcp 终止一个连接，需要经过四次挥手")]),t._v(" "),_("p",[t._v("过程如下：")]),t._v(" "),_("ul",[_("li",[t._v("第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态，停止发送数据，等待服务端的确认")]),t._v(" "),_("li",[t._v("第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态")]),t._v(" "),_("li",[t._v("第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态")]),t._v(" "),_("li",[t._v("第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态")])]),t._v(" "),_("h2",{attrs:{id:"四次挥手原因"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手原因"}},[t._v("#")]),t._v(" 四次挥手原因")]),t._v(" "),_("p",[t._v("服务端在收到客户端断开连接 Fin 报文后，并不会立即关闭连接，而是先发送一个 ACK 包先告诉客户端收到关闭连接的请求，只有当服务器的所有报文发送完毕之后，才发送 FIN 报文断开连接，因此需要四次挥手")]),t._v(" "),_("h2",{attrs:{id:"https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),_("p",[t._v("HTTPS 是超文本传输安全协议，即HTTP + SSL/TLS")]),t._v(" "),_("h3",{attrs:{id:"什么是ssl-tls"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是ssl-tls"}},[t._v("#")]),t._v(" 什么是SSL/TLS")]),t._v(" "),_("h3",{attrs:{id:"tcp和udp的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp的区别"}},[t._v("#")]),t._v(" tcp和udp的区别")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.cn/post/6894053426112495629#heading-34",target:"_blank",rel:"noopener noreferrer"}},[t._v("可参考"),_("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=a.exports}}]);